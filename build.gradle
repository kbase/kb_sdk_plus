plugins {
	id 'application'
	id 'jacoco'
	id 'org.ajoberstar.grgit' version '4.1.1'
	id 'org.graalvm.buildtools.native' version '0.10.6'
}

// TODO BUILD look into GraalVM native compilation vs. dockerizing kb-sdk
//             https://github.com/oracle/graal/issues/407#issuecomment-2573704305
// TODO GENSCRIPT need to update genscript if we don't switch to GraalVM. Need to release to get
//                a latest tag

// TODO TEST DEPS TypeGeneratorTest has a hard coded list of jars it uses for tests
//           Need to figure out a better way
// TODO TEST add a test that starts the SDK in a docker container and checks some simple cmds
// TODO DEPS make JitPack jars for catalog and NMS and use them

// TODO CODE move all code under us.kbase.sdk

group = 'us.kbase.sdk'

repositories {
	mavenCentral()
	maven {  // for syslog4j
		name = 'Clojars'
		url = 'https://repo.clojars.org/'
	}
	maven {
		name = 'Jitpack'
		url = 'https://jitpack.io'
	}
}

application {
	mainClass = 'us.kbase.sdk.ModuleBuilder'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

task buildGitCommitFile {
	doLast {
		def commitId = grgit.head().id
		// is there a variable for builddir/classes/java/main?
		file("$buildDir/classes/java/main/us/kbase/sdk/gitcommit").text = commitId
	}
}

compileJava {
	// tell annotation processors the project name to avoid name collisions
	options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
	options.release = 17
	finalizedBy buildGitCommitFile
}


task kb_sdk_plusScript {
	// creates a kb-sdk script based on the jars in their default locations
	dependsOn jar
	doLast {
		def dependencies = sourceSets.main.runtimeClasspath.collect { File file ->
			file.absolutePath
		}
	
		def buildjar = "$buildDir/libs/${project.name}.jar"
		def classpath = buildjar + ':' + dependencies.join(':')
	
		def scriptContent = """#!/bin/sh

CLASSPATH=$classpath

java -cp \$CLASSPATH us.kbase.sdk.ModuleBuilder \$@
"""
		def outfile = "$buildDir/kb-sdk"
		file(outfile).text = scriptContent
		file(outfile).setExecutable(true)
	}
}

task prepareRunnableDir {
	// like kb_sdk_plusScript but localizes all the jars and the script
	// into a directory for easy copying
	// Note requires bash vs just sh
	dependsOn jar
	def runnableDir = file("$buildDir/runnable")
	def runnerScript = new File(runnableDir, 'kb-sdk')

	doFirst {
		// Clean and recreate runnable dir
		delete runnableDir
		mkdir runnableDir

		// Copy all runtime jars
		sourceSets.main.runtimeClasspath.each { File dep ->
			copy {
				from dep
				into runnableDir
			}
		}

		// Copy the project's jar
		def jarFile = file("$buildDir/libs/${project.name}.jar")
		copy {
			from jarFile
			into runnableDir
		}

		// Write the runner script
		runnerScript.text = """#!/bin/bash

SCRIPT_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
CLASSPATH="\$(ls \$SCRIPT_DIR/*.jar | tr '\\n' ':')"

java -cp \$CLASSPATH us.kbase.sdk.ModuleBuilder \$@
"""
		runnerScript.setExecutable(true)
	}
}

task pythonTest(type: Exec) {
	description = 'Runs Python tests using pytest'
	environment 'PYTHONPATH', './src/main/resources/us/kbase/sdk/templates'
	// Gradle is an absolute hygine product and appears to not necessarily use the same environment
	// as the calling context. Wrapping the command in a new shell fixes that for some reason
	// I don't quite understand.
	// What's odd is that sometimes it works and sometimes it doesn't, but it either works
	// or doesn't for an entire day or more in my experience
	commandLine 'sh', '-c',
		'pytest --cov=authclient --cov-report=xml --cov-report=html test_scripts/py_module_tests'
	doFirst {
		println "Running: ${commandLine.join(' ')}"
	}
}

// this is used in TypeGeneratorTest to supply dependencies for compiler tests
def genCodeLibDir = file("$buildDir/generated-code-libs")

task resolveGeneratedCodeDeps {
	outputs.dir genCodeLibDir
	doLast {
		copy {
			from configurations.generatedCodeClasspath
			into genCodeLibDir
		}
	}
}

test {
	dependsOn resolveGeneratedCodeDeps
	dependsOn kb_sdk_plusScript  // tests use script to compile sdk modules
	dependsOn pythonTest
	
	useJUnitPlatform()
	
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
	}
	
	// Exclude specific directories or files from coverage
	afterEvaluate {
		classDirectories.setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
					'**/common/executionengine/**',
					'**/common/service/**',
					'**/catalog/**',
					'**/narrativemethodstore/**',
				])
			})
		)
	}
}

// TODO BUILD the other script tasks could possibly be made simpler with some of the 
//            variables in this task
tasks.register('generateNativeAgentScript') {
	description = """
		Generates a script to run the application with the GraalVM native-image-agent.
		Will init and test an SDK app called 'testapp', so run this in a location where
		creating that directory is safe.
	"""
	group = 'native-image'
	
	dependsOn jar

	doLast {
		def scriptFile = file("${buildDir}/run-native-agent.sh")
		def classpath = sourceSets.main.runtimeClasspath.asPath
		def mainClass = application.mainClass.get()

		scriptFile.text = """#!/bin/bash
set -euo pipefail

if [ "\$#" -lt 2 ]; then
  echo "Usage: \$0 <output-config-dir> <KBase CI token>"
  exit 1
fi

OUTDIR="\$(realpath "\$1")"
TOKEN="\$2"
COMMON_OPTS="-agentlib:native-image-agent=experimental-class-loader-support=tracer,config-output-dir=\$OUTDIR"

CP="${classpath}"

echo "Running application with native-image-agent output to: \$OUTDIR"
echo

echo "Running init command"
java \$COMMON_OPTS/init -cp "\$CP" ${mainClass} init \\
	-u userhere \\
	-l java \\
	testapp

cd testapp

# set up the test config
sed -i "s#^test_token=.*#test_token=\$TOKEN#" test_local/test.cfg
sed -i "s#appdev\\.kbase\\.us*#ci\\.kbase\\.us#" test_local/test.cfg

echo "Running compile command"
# py compilation runs different code paths so we do both 
java \$COMMON_OPTS/compile -cp "\$CP" ${mainClass} compile \\
	testapp.spec \\
	--out lib \\
	--pyclname testappClient \\
	--pysrvname testappServer \\
	--pyimplname testappImpl \\
	--javasrc src \\
	--java \\
	--javasrv \\
	--javapackage .

echo "Running test command"
java \$COMMON_OPTS/test -cp "\$CP" ${mainClass} test

# comes with GraalVM 17
native-image-configure generate \\
	--output-dir=\$OUTDIR/merged \\
	--input-dir=\$OUTDIR/init \\
	--input-dir=\$OUTDIR/compile \\
	--input-dir=\$OUTDIR/test

echo
echo "Done. NOTE: Inspect the merged output carefully; the agent is better"
echo "than starting from scratch but is imperfect."
echo "When merging into src/main/resources/META-INF/native-image carefully"
echo "check that:"
echo ""
echo "  * all, not just specific resources from this repo are included in the"
echo "    configuration files"
echo "  * test classes are not included (e.g. KBaseReport)"
echo "  * Narrative method store objects have all methods, constructors, and "
echo "    fields included"
echo ""
echo "Edit manually if necessary."
"""

		scriptFile.setExecutable(true)
		println "Generated script at: ${scriptFile.absolutePath}"
	}
}

graalvmNative {
	binaries {
		named('main') {
			imageName.set('kb-sdk')
			// Don't fall back to a jar based build
			buildArgs.addAll([
				'--no-fallback',
				'--enable-url-protocols=https,http',
				'-H:+AddAllCharsets'
			])
		}
	}
}

configurations {
	// can't directly access testImplementation, so extend and access
	testimpl.extendsFrom testImplementation
	// isolate the sdk generated code dependencies from the standard dependencies
	generatedCodeClasspath
}

configurations.all {
	// not sure why, but couldn't get an exclusion on the auth2 client to work, which
	// was upgrading slf4j and breaking tests
	resolutionStrategy {
		force 'org.slf4j:slf4j-api:1.7.7'
	}
}

dependencies {

	// required for GraalVM native compilation
	annotationProcessor('info.picocli:picocli-codegen:4.7.7')
	compileOnly('javax.servlet:servlet-api:2.5')

	implementation('com.github.kbase:auth2_client_java:0.5.0') {
		exclude group: 'com.fasterxml.jackson.core'  // don't upgrade yet, breaks tests
	}
	implementation('com.github.kbase:java_common:0.3.1') {
		exclude group: 'com.fasterxml.jackson.core'  // don't upgrade yet, breaks tests
		exclude group: 'net.java.dev.jna' // don't include in runtime path
	}
	implementation('com.github.kbase:java_kidl:0.2.0')
	// TODO DEPS see if this can be removed after switching to the python callback server
	//           Provenance classes are used in various callback server related classes and tests
	implementation('com.github.kbase.workspace_deluxe:workspace-client:0.15.0') {
		exclude group: 'com.fasterxml.jackson.core'  // don't upgrade yet, breaks tests
		exclude group: 'net.java.dev.jna' // don't include in runtime path
	}
	implementation('com.fasterxml.jackson.core:jackson-annotations:2.2.3')
	implementation('com.fasterxml.jackson.core:jackson-databind:2.2.3')
	implementation('com.google.guava:guava:18.0')
	implementation('com.googlecode.jsonschema2pojo:jsonschema2pojo-core:0.3.6')
	implementation('com.j2html:j2html:0.7') {
		exclude group: 'junit', module: 'junit' // bro
	}
	implementation('commons-io:commons-io:2.4')
	implementation('info.picocli:picocli:4.7.7')
	implementation('org.apache.commons:commons-lang3:3.1')
	implementation('org.apache.velocity:velocity:1.7')
	implementation('org.ini4j:ini4j:0.5.2')
	implementation('com.sun.codemodel:codemodel:2.4.1')
	implementation('org.yaml:snakeyaml:1.11')
	implementation('com.github.zafarkhaja:java-semver:0.10.2')

	// TODO DEPS the deps below are required due to a) the callback server code, b)
	//           tests that mock service wizard and the callback service and
	//           c) java modules created by tests. See if they can be
	//           moved to a test implementation if we swap the callback service for the
	//           python docker image
	implementation('ch.qos.logback:logback-classic:1.1.2')
	implementation('org.slf4j:slf4j-api:1.7.7')
	// TODO DEPS the annotation api is also needed for
	//           a couple of SDK compiled classes in mobu/runner that should be factored out
	implementation('javax.annotation:javax.annotation-api:1.3.2')
	implementation('joda-time:joda-time:2.2')
	// this is OOOOOOLD. But that probably means updating java_common
	implementation('org.eclipse.jetty.aggregate:jetty-all:7.0.0.v20091005')
	// TODO DEPS Need to rework the java common logger to not use syslog4j at all since it's
	// abandonware and has a ton of CVEs, even in the newer versions.
	// Note that the java SDK modules use syslog4j, so we'll need to figure something out
	// there. I doubt any of the apps actually use the logging code that triggers it though
	implementation('org.syslog4j:syslog4j:0.9.46')

	testImplementation ('com.github.kbase:java_test_utilities:0.1.0') {
		exclude group: 'com.fasterxml.jackson.core'  // don't upgrade yet, breaks tests
		exclude group: 'junit', module: 'junit'
	}
	// needed for syslog4j. Used in java test modules and JsonServerServlet subclasses in tests
	// but not in SDK code proper.
	testImplementation('net.java.dev.jna:jna:3.4.0')
	testImplementation("nl.jqno.equalsverifier:equalsverifier:4.0.7")
	testImplementation('org.hamcrest:hamcrest:3.0')
	testImplementation('org.junit.jupiter:junit-jupiter:5.13.1')
	
	// isolate the sdk generated code dependencies from the standard dependencies
	
	generatedCodeClasspath('ch.qos.logback:logback-classic:1.1.2')
	generatedCodeClasspath('com.fasterxml.jackson.core:jackson-annotations:2.2.3')
	generatedCodeClasspath('com.fasterxml.jackson.core:jackson-databind:2.2.3')
	generatedCodeClasspath('com.github.kbase:auth2_client_java:0.5.0') {
		exclude group: 'com.fasterxml.jackson.core'  // don't upgrade yet, breaks tests
	}
	generatedCodeClasspath('com.github.kbase:java_common:0.3.1') {
		exclude group: 'com.fasterxml.jackson.core'  // don't upgrade yet, breaks tests
		exclude group: 'net.java.dev.jna' // don't include in test path
	}
	generatedCodeClasspath('javax.annotation:javax.annotation-api:1.3.2')
	generatedCodeClasspath('javax.servlet:servlet-api:2.5')
	generatedCodeClasspath('joda-time:joda-time:2.2')
	generatedCodeClasspath('junit:junit:4.12')
	generatedCodeClasspath('net.java.dev.jna:jna:3.4.0')
	generatedCodeClasspath('org.eclipse.jetty.aggregate:jetty-all:7.0.0.v20091005')
	generatedCodeClasspath('org.hamcrest:hamcrest-core:1.3')
	generatedCodeClasspath('org.ini4j:ini4j:0.5.2')
	generatedCodeClasspath('org.syslog4j:syslog4j:0.9.46')
	generatedCodeClasspath('org.slf4j:slf4j-api:1.7.7')
}

task showTestClassPath {
	doLast {
		configurations.testimpl.each { println it }
	}
}
