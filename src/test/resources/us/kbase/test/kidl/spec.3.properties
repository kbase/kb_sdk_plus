/*
Experiment Service API specification

This service provides various methods for extracting data from the Experiment portion of the CDS.

*/

module Experiment
{
	/* IMPORTED OBJECTS -------------- */

	/* Workspace service */

	/* A string used as an ID for a workspace. Any string consisting of alphanumeric characters and "-" is acceptable  */
	typedef string workspace_id;
	
	/* A string indicating the "type" of an object stored in a workspace. Acceptable types are returned by the "get_types()" command  */
	typedef string object_type;
	
	/* ID of an object stored in the workspace. Any string consisting of alphanumeric characters and "-" is acceptable */
	typedef string object_id;
	
	/* Single letter indicating permissions on access to workspace. Options are: 'a' for administative access, 'w' for read/write access, 'r' for read access, and 'n' for no access. */
	typedef string permission;
	
	/* Login name of KBase useraccount to which permissions for workspaces are mapped */
	typedef string username;
	
	/* Exact time for workspace operations. e.g. 2012-12-17T23:24:06 */
	typedef string timestamp;
	
	/* A 36 character string referring to a particular instance of an object in a workspace that lasts forever. Objects should always be retreivable using this ID */
	typedef string workspace_ref;
	
	typedef tuple<object_id id, object_type type, timestamp moddate, int instance, string command, username lastmodifier, username owner, workspace_id workspace, workspace_ref ref, string chsum, mapping<string,string> metadata> object_metadata;

	/* END IMPORTED OBJECTS ---------- */

	typedef int boolean;

	typedef string compound_id;
	typedef list<compound_id> compounds;
	typedef float molar_ratio;
	typedef mapping<compound_id, molar_ratio> cpd_to_molar;
	typedef mapping<compound_id, cpd_to_molar> compound_relationships;

	/*
	Returns the child compounds of the input compounds and their molar ratio
	equivalents to the parent/input. The MR is -1 if the molar ratio is
	unknown.
	If the input compounds have no children the returned mapping contains
	the input compound and 1 as the molar ratio.
	Intermediate compounds in the tree between child (e.g. a compound that
	has no more children) and input/parent compound are not returned.
	*/
	funcdef getChildCompounds(compounds parents) returns(compound_relationships);

	/*
	Returns the parent compounds of the input compounds and the molar ratio
	of the child compound to the parent compound. Note this is the same value
	as returned by the getChildCompounds function, not the inverse of that
	value. The MR is -1 if the molar ratio is unknown.
	If the input compounds have no parents the returned mapping contains
	the input compound and 1 as the molar ratio.
	Intermediate compounds in the tree between parent (e.g. a compound that
	has no more parents) and input/child compound are not returned.
	*/
	funcdef getParentCompounds(compounds children) returns(compound_relationships);

	/*
	Returns a representation of the compound tree from the parent compounds to
	their ultimate children. All intermediate compounds in the tree are 
	included. This takes the form of a mapping between a parent and its 
	immediate children and a subsequent mapping between those children and the 
	molar ratio from parent:child. To traverse the tree, choose the parent of
	interest, retrieve the child:molar ratio mapping, and continue down the
	tree with each child, retrieving its children from the mapping returned
	by the function. If a compound has no children it is not included in the
	mapping.
	*/
	funcdef getChildAndIntermediateCompounds(compounds parents) returns(compound_relationships);

	/*
	Returns a representation of the compound tree from the child compounds to
	their ultimate parents. All intermediate compounds in the tree are 
	included. This takes the form of a mapping between the child and its 
	immediate parents and a subsequent mapping between those parents and the 
	molar ratio from parent:child. To traverse the tree, choose the child of
	interest, retrieve the parent:molar ratio mapping, and continue up the tree
	with each parent, retrieving its parents from the mapping returned
	by the function. If a compound has no parents it is not included in the 
	mapping.
	*/
	funcdef getParentAndIntermediateCompounds(compounds children) returns(compound_relationships);

	typedef string media_id;
	typedef list<media_id> exclude_medias;
	typedef list<compound_id> exclude_compounds;
	typedef boolean exclude_solid;
	typedef boolean exclude_undefined;
	typedef list<media_id> medias;

	/*
	Find medias matching the input requirements. Media IDs in exclude_medias
	will not be returned under any circumstances. Medias containing the
	compounds in exclude_compounds, their parent compounds, and any 
	intermediate compounds will be excluded. The arguments exclude_solid and
	exclude_undefined will prevent solid and undefined medias, respectively,
	from inclusion in the results.
	*/
	funcdef findMedias(exclude_medias, exclude_compounds, exclude_solid, exclude_undefined) returns(medias);

	typedef string environment_id;
	typedef list<environment_id> environments;
	typedef tuple<string sourceID, string description, float temperature, float oxygenConcentration, float pH, string mediaID, string conditions, string parameters> envEF;
	typedef mapping<environment_id, envEF> envEFs;

	/*
	Return Environment objects in exchange format. Compounds are returned
	as loaded and are not resolved to the subcompounds. Entries with no values
	are returned as null (e.g. if the environment has no additional compounds
	the conditions field in envEF will be undef/None/null).
	*/
	funcdef getEnvironmentsInExchangeFormat(environments) returns(envEFs);

	typedef string group_id;
	typedef list<group_id> groups;
	typedef float time_point;
	typedef mapping<time_point, environment_id> time_to_env;
	/* Defines whether an experimental unit refers to metadata about a grouping
	or time series, value is either 'Y' or 'N' */ 
	typedef string meta;
	typedef meta groupMeta;
	typedef meta timeMeta;
	typedef mapping<timeMeta, time_to_env> meta_to_time;
	typedef string time_series_id;
	typedef structure {
		time_series_id timeSeriesId;
		meta_to_time timepoints;
	} env_by_time;
	typedef string location;
	typedef mapping<location, env_by_time> loc_to_time_info;
	typedef mapping<groupMeta, loc_to_time_info> meta_to_loc;
	typedef mapping<group_id, meta_to_loc> env_by_group;

	/*
	Return environment ids for a particular experimental unit group 
	hierarchially grouped by the group meta boolean, the location in 
	the group, the time meta boolean, and the time point. The id of 
	the time series, if any, is included at the level of the group
	location. Group locations or time information that does not exist
	for a group->environment relationship is represented by nulls.
	*/
	funcdef getEnvironmentByGroup(groups) returns(env_by_group);

	typedef string genome_id;
	typedef int maxKnockouts;
	typedef boolean onlyWildtype;
	typedef boolean onlyAggregate;
	typedef string feature_id;
	typedef list<feature_id> knockouts;
	typedef string strain_id;
	typedef mapping<strain_id, knockouts> strainToKOs;

	/*
	Returns the strains and their knockouts that match the given genome,
	maximum knockout count, and wildtype and aggregate data boolean flags.
	*/
	funcdef findStrainsAndKOs(genome_id, maxKnockouts, onlyWildtype, onlyAggregate) returns(strainToKOs);

	typedef string experimentMeta_id;
	typedef float min_temp;
	typedef float max_temp;
	typedef float min_oxygen;
	typedef float max_oxygen;
	typedef float max_pH;
	typedef float min_pH;

	typedef structure {
		genome_id genome;
		int maxKnockouts;
		boolean onlyWildtype;
		boolean onlyAggregate;
		list<experimentMeta_id> experimentMetaIDs;
		groups excludeGroups;
		groups onlyGroups;
		boolean growthBoolean;
		list<media_id> excludeMedias;
		list<media_id> onlyMedias;
		list<compound_id> excludeCompounds;
		list<compound_id> dropCompounds;
		boolean excludeSolid;
		boolean excludeUndefined;
		tuple<min_temp, max_temp> temperatureRange;
		tuple<min_oxygen, max_oxygen> oxygenRange;
		tuple<min_pH, max_pH> pHRange;
		string aggMethod;
		float oxygenCutoff;
		boolean allValues;
		boolean mergeCompounds;
		boolean parentCompounds;
	} gmInputParams;
	typedef float fitnessValue;
	typedef list<fitnessValue> fitnessValues;
	typedef structure {
		float median;
		float mean;
		float stddev;
	} statistics;
	typedef tuple<knockouts, compounds, fitnessValue, environment_id> growmatchRow;
	typedef list<growmatchRow> growmatchGroup;
	typedef structure {
		growmatchGroup data;
		compounds groupComponds;
		fitnessValues allValues;
		statistics stats;
		environment_id env;
	} groupdata;
	typedef mapping<group_id, groupdata> growmatchData;

	/*
	Given a number of input parameters, returns data for input into
	a growmatch FBA algorithm. Fundamentally the data consists of a mapping
	of an environment, consisting of a list of compounds, and a set of gene
	knockouts to a fitness value or a growth boolean. By default, the data 
	is processed such that data rows (where a row is an environment, set of 
	knockouts, and a fitness value) with identical compounds and knockouts 
	are merged into a single row by taking the maximum of the identical 
	rows.
	
	The return value consists of a mapping of ExperimentalUnitGroup IDs to a
	structure containing several pieces of data about the group: 1) the list 
	of compounds in the environment of the group, 2) some summary statistics
	about the entire group (e.g. including all rows, not just the returned
	merged rows), 3) the ID of the environment of the group, 4) if 
	requested, a list of all fitness values in the group for the purposes of
	thresholding and finally, 5) the list of data rows containing, by 
	default, the knockout list, an empty compound list, and the fitness 
	value (see options below regarding the compound list).

	The fitness value entry can consist of either a continuous fitness value
	(see measurement description IDs kb|measdesc.0 and 1) or a growth
	boolean (see kb|measdesc.5). Groups, in this case, will typically be 
	microarrays or RNAseq experiments. Data that is not associated with any
	group is mapped from an empty string ('') instead of a KBase 
	experimental unit group ID. For this 'group' statistics are not provided
	and the compounds and environment ID are provided on a per row basis 
	rather than once for the entire group. No time series	data is ever 
	returned.
	
	Input values are:
	genome - the KBase ID of the genome to pull data from

	maxKnockouts - the maximum number of knockouts allowed for any strain
			in the return data (defaults to no limit) 

	onlyWildType - only strains marked as wildtype will be returned (default
			false (0))

	onlyAggregate - only strains that represent aggregate data from multiple
			strains will be returned (default true (1))

	experimentMetaIDs - the KBase IDs of the experimentMeta entities from 
				which to return data (default all)

	excludeGroups - the data related to the ExperimentalUnitGroup KBase IDs 
			in this list will be excluded from the results.

	onlyGroups - only the data related to the ExperimentalUnitGroup KBase IDs 
			in this list will be included in the results. excludeGroups
			will be ignored. An empty list results in no restrictions
			(default) except those in excludeGroups.

	growthBoolean - if true, returns data consisting of a growth boolean (1
			for grows, 0 for doesn't grow) rather than fitness values.
			Defaults to returning fitness values. There is no guarantee
			that a particular strain/environment combination with
			growth boolean data has fitness value data as well and 
			vice versa.

	excludeMedias - data using the media specified by the KBase media IDs in
			this list will not be returned.

	onlyMedias - only data using the medias in this list will be returned. If
			this list is not empty excludeMedias and excludeCompounds
			are ignored. If all three lists are empty no restrictions
			are placed on the medias allowed.

	excludeCompounds - any data using medias or environments containing these
				compounds or any of their parent compounds will not 
				be returned.

	dropCompounds - these compounds will be silently removed from the data 
			before it is returned. Typically used to remove compounds
			such as VitB12 which can interfere with FBA results. Does 
			not prevent using medias or environments containing the 
			compound. Only an exact match will be removed from the 
			returned data - children and parent compounds will remain
			in the data.

	excludeSolid -	any data using solid medias will be excluded if true (1).
			Defaults to false (0).

	excludeUndefined - any data using undefined medias will be excluded if
				true (1). Defaults to false (0).

	temperatureRange - any data outside the given temperature range will be 
				excluded from the results. Defaults to no limits.

	oxygenRange - any data outside the given oxygen range will be excluded 
			from the results. Defaults to no limits. Recall that -1
			signifies the presence of an unknown but substantial 
			quantity of oxygen (as in an unmonitored shake flask,
			for example).

	pHRange - any data outside the given pH range will be excluded from the 
			results. Defaults to no limits. If a range is given, data
			without pH data will not be returned.

	aggMethod - the method by which to aggregate data rows with identical
			compound lists and knockouts. The choices are 'max', 
			'min', or 'none' which return the maximum or minimum 
			growth / fitness value or performs no aggregation,
			respectively. The default is max, which is appropriate
			for nutrient compounds, but less so for inhibitors.
			Vice versa for min.

	oxygenCutoff - environments with a greater oxygen concentration than
			this value will have oxygen added to the compound
			list if it doesn't already exist. Defaults to 0.000002.
			If the oxygen value is < 0 oxygen is always added to 
			the compound list.

	allValues - returns a list of all fitness values in each group for
			the purposes of statistical thresholding. By default
			an empty list is returned.

	mergeCompounds - if true, rather than returning one list of compounds per group,
				each row of the data contains the compounds 
				list. In this case the group level list of compounds
				will be empty. Note that the transfer and storage
				costs for the data will probably go up significantly
				if this option is enabled.

	parentCompounds - by default, the compounds returned are the ultimate
				subcompounds of the media and environment compound
				lists. If this parameter is set to True, the compounds
				returned are not resolved to subcompounds.

	*/
	funcdef generateGrowmatchInput(gmInputParams) returns(growmatchData);

	/*
	As generateGrowmatchInput but rather than returning the data, it is
	stored in the authenticated user's workspace. The ID of the workspace
	into which to save the object as well as the ID to save the object to
	are required. The data is stored in a structure with two fields: 
	'params' and 'gmdata'. The input parameters (e.g. the gmInputParams
	structure) is stored in the first field while the grow match data
	is stored in the second. The object type is 'Growmatch data'.
	The standard object metadata from the workspace	service is returned.
	*/
	funcdef storeGrowmatchInput(gmInputParams, workspace_id, object_id) returns(object_metadata) authentication required;    
};

