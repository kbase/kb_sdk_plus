module Genotype_PhenotypeAPI {

        /*kbase id of genome eg. kb|g.3899 */
        typedef string kb_genome;

        /*genome name  eg. Arabidopsis thaliana*/
        typedef string genome_name;

        /*kbase id of the experiment eg. kb|g.3899.exp.1*/
        typedef string kb_study_experiment;

        /*Design information about the experiment eg. SNP Array chip or resequencing experiment eg. ~250K SNPs x 107 phenotpes*/
         typedef string design_experiment;
       
        /*Name of the individual or program that are the originators of the experiment eg. Atwell S, et. al. */
         typedef  string originator;

        /*trait is the kbase id of the trait. kb|g.3899.trait.191*/
	typedef string trait;

       /*chromosome is the source id (eg. TAIR id) of the chromosome eg. 1*/
	typedef string chromosome;

       /* kb_chromosome is the kbase id of the chromosome eg. kb|g.22476.c.2496*/
	typedef string kb_chromosome;


       /*position is the location of variant on the chromosome*/
	typedef int position;
     
	typedef float pvalue; 

        /*source id of the gene */
	typedef string gene;
        /* kbase id of the gene */
	typedef string kbase_gene;

	typedef float pvaluecutoff;
	typedef int distance;
	typedef int rankcutoff;
	typedef string region;

        /* pmin is minimum selected pvalue */
	typedef float pmin; 
        /* pmax is maximum selected pvalue */
	typedef float pmax;
 
        /*start is the start position of chromosomal location */
        typedef int start;
        /*end is the end position of chromosomal location */
        typedef int end;

	/* phenotype/trait measurement protocol*/
	 typedef string protocol;

	/*trait ontology*/
	typedef string to_id;

	/*unit of measurement of a phenotype/trait */
	typedef string unit_of_measure;

        /*variation_details has the output for manhattan plot */
        typedef list<tuple<chromosome,position, pvalue, kb_chromosome>> variation_details;



	/*experiment_details: kb_study_experiment, experiment design, orginator*/
	typedef list <tuple <kb_study_experiment, design_experiment, originator>> experiment_details;

	/*experiment_details: kb_study_experiment, experiment design, orginator*/
	typedef list <tuple <trait, protocol, to_id, unit_of_measure>> trait_metadata;

        /*variation_details with trait metadata */
        typedef mapping<trait_metadata,variation_details> variation_details_with_trait_metadata;



	/*chromosomal positions: list of positions define by tuple chromosome,  position; position can be from several different chromosomes */
	typedef list <tuple<chromosome, position>> chromosomal_positions;

	/*chromosomal locations: chromosome start end */
	typedef list <tuple<chromosome, start, end>> chromosomal_locations;

	/*trait_list_pvalue:List of traits and pvalue*/
	typedef list <tuple<trait, pvaluecutoff>> trait_list_pvalue;

	/*list of genes*/
	typedef list <tuple<kbase_gene, gene>> gene_list;
        /*Trait details and list of genes*/
        typedef list <tuple<trait_metadata, gene_list>> gene_list_with_trait_metadata;

       /*list of genomes*/
	typedef list <kb_genome> kb_genome_list;

       /* get genomes with trait/phenotype data*/
        funcdef genomes_with_trait () returns (kb_genome_list) ;

        /* get all experiments corresponding to a genome. */
        funcdef get_experiments (kb_genome) returns (experiment_details) ;

        /* get list of traits in an experiment*/
        funcdef get_traits (kb_study_experiment) returns (trait_metadata) ;

       /* Given a trait id and pvalue cutoff,  the trait metadata and significant variations above the pvalue cutoff */
	funcdef traits_to_variations (trait, pvaluecutoff) returns (variation_details_with_trait_metadata); 

       /*variation details is a data structure with 4 columns, this function converts it into 2 columns for use in other functions */
        funcdef chromosome_position_from_variation_details (variation_details) returns (chromosomal_positions);

       /* Given a trait, directly get the trait metadata and gene list. */        
        funcdef traits_to_genes (trait, pvaluecutoff,distance) returns (gene_list_with_trait_metadata);
 
       /*Given a set of variations (genomic locations), identify the genes near the variations */
	funcdef variations_to_genes (chromosomal_positions, distance) returns (gene_list); 

       /*Given a set of traits, identify variants that are common to those traits above a certain pvalue cutoff */
	funcdef find_common_snps (trait_list_pvalue) returns (chromosomal_positions);

       /*Given pvalue range, list of chromosomal positions, and distance, this function find snpâ€™s with pvalue within the given pvalue range. It then identifies genes within given distance and return  list of genes. This function is written to take selection from manhattan plot as input and feed results to other widget*/
	funcdef selected_locations_to_genes (trait, pmin, pmax, chromosomal_locations, distance) returns (gene_list); 

  };


