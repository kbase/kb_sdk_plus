package us.kbase.test6;

import java.net.URL;

import us.kbase.auth.AuthToken;
import us.kbase.common.service.UnauthorizedException;
import us.kbase.common.service.ServerException;
import us.kbase.test6.authtest.AuthTestClient;

import junit.framework.Assert;

public class Test6 {
	
	public Test6(AuthTestClient client, Integer port) throws Exception {
		client = new AuthTestClient();
		client.setIsInsecureHttpConnectionAllowed(true);
		try {
			client.callWithAuth("");
			Assert.fail("Method shouldn't work because it requires authentication");
		} catch (UnauthorizedException ex) {
			Assert.assertEquals("RPC method requires authentication but credentials were not provided", ex.getMessage());
		}
		Assert.assertEquals("0", client.callWithOptAuth("0"));
		AuthToken token = new AuthToken(System.getProperty("test.token"), "<unknown>");
		client = new AuthTestClient(new URL("http://localhost:" + port), token);
		client.setIsInsecureHttpConnectionAllowed(true);
		Assert.assertEquals("1", client.callWithAuth("1"));
		Assert.assertEquals("2", client.callWithOptAuth("2"));
		client = new AuthTestClient(token);
		client.setIsInsecureHttpConnectionAllowed(true);		
		Assert.assertEquals("1", client.callWithAuth("1"));
		Assert.assertEquals("2", client.callWithOptAuth("2"));
		AuthToken badtoken = new AuthToken("dumb", "dumber");
		try {
			client = new AuthTestClient(new URL("http://localhost:" + port), badtoken);
			client.setIsInsecureHttpConnectionAllowed(true);
			client.callWithAuth("");
			Assert.fail("Method shouldn't work because authentication should fail on server side");
		} catch (ServerException ex) {
			Assert.assertTrue(ex.getMessage().contains("Token validation failed"));
		}
		try {
			client = new AuthTestClient(badtoken);
			client.setIsInsecureHttpConnectionAllowed(true);
			client.callWithAuth("");
			Assert.fail("Method shouldn't work because authentication should fail on server side");
		} catch (ServerException ex) {
			Assert.assertTrue(ex.getMessage().contains("Token validation failed"));
		}
	}
}