/*
KBase File Type Manager Service

This service tracks the type of files that KBase software recognizes and
properties of these file types (such as acceptable file extensions).  File types
exist in a hierarchy (e.g. XML is a type of TEXT file) and are uniquely identified
by a short unique string id.  File types are loosely coupled to different types
of data supported by KBase.

In the future, this service may provide some validation capabilities to ensure
that a given file matches some basic properties of  file type, e.g. a valid XML
document.

created 10/18/2012 - msneddon
*/
module FileType
{
    /* The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)*/
    typedef string file_type_id;
    
    /* The full display name of the file type (e.g. 'Text File', 'HyperText Markup Language File') */
    typedef string file_type_name;
    
    /* A short string indicating a possible file extension */
    typedef string file_extension;
    
    /*
    An object that encapsulates properties of a file type.  Note that unless otherwise stated, any
    method which returns a file_type also includes all inhereted valid_file_extensions and properties.
    
    file_type_id id
        the unique string based id of this file type
        
    file_type_name name
        the human readable long name of the file type
    
    list<file_extension> valid_file_extensions
        a list of extensions that are associated with this file type.  Note that in some cases this will
        include extensions that are inhereted from parent file types (e.g. a valid extension to a tab
        delimited file may be 'tab', but also 'txt' because it is a text file as well)
    
    mapping<string,string> properties
        a simple mapping of key/value pairs used to describe attributes of the file type.  These in general
        can have any string as a key, but note that the following keys have been adopted for most file
        types by convention.  Note that if these properties are not defined, then they are inherited from
        a parent file_type object
            default-extension  -  gives the single default extension
            default-web-renderer  -  the name/id of the widget that should be used by default to view the
                                     contents of this file type
    */
    typedef structure {
        file_type_id id;
        file_type_name name;
        list<file_extension> valid_file_extensions;
        mapping<string,string> properties;
    } file_type;
    

    /* *********************************************************************************************** */
    /* METHODS FOR QUERYING FILE TYPES */
    /* *********************************************************************************************** */

    /* Returns the specified file_type object including all inherited file extensions and properties, or
    an empty object if the file_type_id is not valid
    */
    funcdef get_file_type(file_type_id id) returns (file_type);
    
    /* Returns the specified file_type object with THIS file_type object's extensions and properties ONLY,
    not any of the extensions or properties inhereted by a parent. Therefore be careful since you may not
    have all valid file extensions and properties for this file type!
    */
    funcdef get_this_file_type_only(file_type_id id) returns (file_type);
    
    /* Returns the specified file_type name, or an empty string if file_type_id is not valid. */
    funcdef get_file_type_name(file_type_id id) returns (file_type_name);
    
    /* Returns the specified file_type names, or an empty string if file_type_id is not valid. */
    funcdef get_file_type_names(list<file_type_id> ids) returns (mapping<file_type_id,file_type_name>);
    
    /* Returns a default extension for the given filetype. */
    funcdef get_default_extension(file_type_id id) returns (file_extension);
    
    /* Returns a default extensions for the given filetypes. */
    funcdef get_default_extensions(list<file_type_id> ids) returns (mapping<file_type_id,file_extension>);
    
    /* Returns the specified file_type property, or an empty string if file_type_name is not valid
    or the property is undefined.  This method also searches any inhereted properties.   */
    funcdef get_file_type_property(file_type_id id, string key) returns (string);

    /* Returns the file_type ids of any file types with names that are an exact match ignoring
    case to the input name.  There is no gaurantee that file type names are unique.  Note that this
    method is generally slow because it must search over every possible file type. */
    funcdef get_file_type_id_by_full_name(file_type_name name) returns (list<file_type_id>);
    
    
    
    /* Given an extension, get a list of possible file types that could apply, including any file_types
    that inheret this extension from parent file types. */
    funcdef get_possible_file_type_by_extension(file_extension extension) returns (list<file_type_id>);
    
    /* Given an extension, get a list of file types which use this extension as its DEFAULT file type. */
    funcdef get_possible_file_type_by_default_extension(file_extension extension) returns (list<file_type_id>);
    
    

    /* Returns the id of the parent file_type, or-1 if no parent exists or the input file_type_id is not valid. */
    funcdef get_parent(file_type_id id) returns (file_type_id);
    
    /* Returns a list of all children of this file type */
    funcdef get_all_children(file_type_id id) returns (list<file_type_id>);

    /* Returns the full lineage of the given file_type in order starting from the root, so that the first element
    of the list is the root of the hierarchy, and the last element is the parent of the given file type. Returns
    an empty list if the id is not valid or the id was already the root. */
    funcdef get_ancestry(file_type_id id) returns (list<file_type_id>);
    
    /* Returns a list of all decendents (ordered as a breadth first traversal) */
    funcdef get_all_descendants(file_type_id id) returns (list<file_type_id>);
    
    /* Returns the file type hierarchy as a newick string, which can be parsed and manipulated by
    various tree libraries, such as the KBase Phylogenetic Tree services. */
    funcdef dump_file_type_hierarchy_in_newick() returns (string);
    
    /* Returns a pretty string representation of the full hierarchy of every supported file listed by file
    type id.  This should be used for display purposes only! */
    funcdef dump_file_type_hierarchy_pretty() returns (string);
    
    /* Returns a list of every file type id that is currently defined in alphabetical order */
    funcdef all_file_type_ids() returns (list<file_type_id>);

    /* Returns a list of every file type id and the value of the associated property.  Thus you can
    quickly list all filetypes and, say, a default renderer if defined for each file type. */
    funcdef all_file_type_property(string propertyName) returns (mapping<file_type_id,string>);
    

    /* *********************************************************************************************** */
    /* METHODS FOR ADDING/MODIFYING FILE TYPES (note that not all of these methods may be absolutely
    /* necessary, and should require authentication if we choose to keep them) */
    /* NOTE: these methods are currently not deployed or implemented */
    /* *********************************************************************************************** */
   
    /* Add a new file type to the hierarchy directly under the given parent id. If parent is set
    to -1, then the file type is added directly under the root node and has no parent. If the
    parent_id is not valid, an error is generated. The method returns the ID of the new file_type if
    successfully created, -1 otherwise. */
    /*funcdef add_file_type(file_type ft, file_type_id parent) returns (file_type_id);*/

    /* Removes the specified file type from the hierarchy and all file types below. */
    /*funcdef remove_file_type(file_type_id id) returns (bool);*/
    
    /* Reparents the specified file type in the hierarchy.  If parent is set
    to -1, then the file type is added directly under the root node and has no parent. If the
    parent_id is not valid, an error is generated. Returns true if successful. */
    /*funcdef reparent_file_type(file_type_id id, file_type_id parent) returns (bool);*/

    /* Completely modifies all properties of the given file_type with the new file_type. */
    /*funcdef modify_file_type(file_type_id id, file_type ft) returns (bool);*/

    /* Updates or adds the specified file_type property.  Returns true if successful.  */
    /*funcdef set_file_type_property(file_type_id id, string key, string value) returns (bool);*/

    /* Set the given file extension as a valid possible extension for this file type. */
    /*funcdef add_valid_file_extension(file_type_id id, file_extension extension) returns (bool);*/
    
};
