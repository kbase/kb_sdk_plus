#foreach( $module in $modules )



    function ${module.module_name}(args) {  // url, auth, auth_cb, timeout, async_job_check_time_ms, service_version
        var module = '${module.module_name}';

        var auth;
        if (typeof arg.auth === 'function') {
            auth = arg.auth();
        } else {
            auth = arg.auth || {};
        }
        
        if (!arg.url) {
            throw new Error('The service discovery url was not provided');
        }
        if (!arg.version) {
            throw new Error('The service version was not provided');
        }


        function options() {
            return {
                timeout: arg.timeout,
                authorization: auth.token,
                rpcContext: arg.rpcContext
            };
        }

        this.lookupModule = function () {
            var func = 'get_service_status',
                params = [{
                        module_name: module,
                        version: arg.version || 'dev'
                    }];
            return request(arg.url, 'ServiceWizard', func, params, 1, options());
        };
        
    
    this.async_job_check_time_ms = async_job_check_time_ms;
    if (!this.async_job_check_time_ms)
        this.async_job_check_time_ms = 100;
    this.async_job_check_time_scale_percent = 150;
    this.async_job_check_max_time_ms = 300000;  // 5 minutes
    this.service_version = service_version;
#if( $service_ver )
    if (!this.service_version)
        this.service_version = '$service_ver';
#end

#if( $default_service_url )
    if (typeof(_url) != "string" || _url.length == 0) {
        _url = "${default_service_url}";
    }
#end
    var _auth = auth ? auth : { 'token' : '', 'user_id' : ''};
    var _auth_cb = auth_cb;
#if( $any_async || $async_version)

    this._check_job = function (job_id, _callback, _errorCallback) {
        if (typeof job_id === 'function')
            throw 'Argument job_id can not be a function';
        if (_callback && typeof _callback !== 'function')
            throw 'Argument _callback must be a function if defined';
        if (_errorCallback && typeof _errorCallback !== 'function')
            throw 'Argument _errorCallback must be a function if defined';
        if (typeof arguments === 'function' && arguments.length > 3)
            throw 'Too many arguments ('+arguments.length+' instead of 3)';
        return json_call_ajax(_url, "${module.module_name}._check_job", 
            [job_id], 1, _callback, _errorCallback);
    };
#end
#set( $status_in_kidl = false )
#foreach( $method in $module.methods )
#if( ${method.name} == "status" )
#set( $status_in_kidl = true )
#end

#if( $any_async || $async_version)
    this.${method.name} = function (#if($method.arg_count==0)#{else}${method.args}, #{end}_callback, _errorCallback, json_rpc_context) {
        if (self.service_version) {
            if (!json_rpc_context)
                json_rpc_context = {};
            json_rpc_context['service_ver'] = self.service_version;
        }
        var async_job_check_time_ms = self.async_job_check_time_ms;
        self._${method.name}_submit(#if($method.arg_count==0)#{else}${method.args}, #{end}function(job_id) {
            var _checkCallback = null;
            _checkCallback = function(job_state) {
                if (job_state.finished != 0) {
                    if (!job_state.hasOwnProperty('result'))
                        job_state.result = null;
#if( ${method.ret_count} == 1 )
                    _callback(job_state.result[0]);
#else
                    _callback(job_state.result);
#end                    
                } else {
                    setTimeout(function () {
                        async_job_check_time_ms = async_job_check_time_ms * 
                            self.async_job_check_time_scale_percent / 100;
                        if (async_job_check_time_ms > self.async_job_check_max_time_ms)
                            async_job_check_time_ms = self.async_job_check_max_time_ms;
                        self._check_job(job_id, _checkCallback, _errorCallback);
                    }, async_job_check_time_ms);
                }
            };       
            _checkCallback({finished: 0});
        }, _errorCallback, json_rpc_context);
    };

    this._${method.name}_submit = function (#if($method.arg_count==0)#{else}${method.args}, #{end}_callback, _errorCallback, json_rpc_context) {
#foreach( $param in $method.params )
        if (typeof ${param.name} === 'function')
            throw 'Argument ${param.name} can not be a function';
#end
        if (_callback && typeof _callback !== 'function')
            throw 'Argument _callback must be a function if defined';
        if (_errorCallback && typeof _errorCallback !== 'function')
            throw 'Argument _errorCallback must be a function if defined';
        if (typeof arguments === 'function' && arguments.length > $method.arg_count+2)
            throw 'Too many arguments ('+arguments.length+' instead of '+($method.arg_count+2)+')';
        return json_call_ajax(_url, "${module.module_name}._${method.name}_submit", 
            [${method.args}], 1, _callback, _errorCallback, json_rpc_context);
    };
    
#else ## if-async
    this.${method.name} = function (#if($method.arg_count==0)#{else}${method.args}, #{end}_callback, _errorCallback) {
        var params = Array.prototype.slice.call(arguments);
        if (params.length != $method.arg_count) {
            throw 'Wrong number of arguments ('+params.length+' instead of $method.arg_count)';
        }
#if( $dynserv_ver )
        var deferred = $.Deferred();
        json_call_ajax(_url, 'ServiceWizard.get_service_status', [{'module_name' : "${module.module_name}", 
                'version' : self.service_version}], 1, function(service_status_ret) {
            srv_url = service_status_ret['url'];
            json_call_ajax(srv_url, "${module.module_name}.${method.name}", 
                [${method.args}], ${method.ret_count}, _callback, _errorCallback, null, deferred);
        }, function(err) {
            if (_errorCallback) {
                _errorCallback(err);
            } else {
                deferred.reject({
                    status: 500,
                    error: err
                });
            }
        });
        return deferred;
#else
        return json_call_ajax(_url, "${module.module_name}.${method.name}",
            [${method.args}], ${method.ret_count}, _callback, _errorCallback);
#end
    };
#end ## if-async
#end ## foreach method
#if( !$status_in_kidl )
#if( $async_version )

    this.status = function (_callback, _errorCallback, json_rpc_context) {
        if (self.service_version) {
            if (!json_rpc_context)
                json_rpc_context = {};
            json_rpc_context['service_ver'] = self.service_version;
        }
        if (_callback && typeof _callback !== 'function')
            throw 'Argument _callback must be a function if defined';
        if (_errorCallback && typeof _errorCallback !== 'function')
            throw 'Argument _errorCallback must be a function if defined';
        var async_job_check_time_ms = self.async_job_check_time_ms;
        json_call_ajax(_url, "${module.module_name}._status_submit", 
            [], 1, function(job_id) {
            var _checkCallback = null;
            _checkCallback = function(job_state) {
                if (job_state.finished != 0) {
                    if (!job_state.hasOwnProperty('result'))
                        job_state.result = null;
                    _callback(job_state.result[0]);
                } else {
                    setTimeout(function () {
                        async_job_check_time_ms = async_job_check_time_ms *
                            self.async_job_check_time_scale_percent / 100;
                        if (async_job_check_time_ms > self.async_job_check_max_time_ms)
                            async_job_check_time_ms = self.async_job_check_max_time_ms;
                        self._check_job(job_id, _checkCallback, _errorCallback);
                    }, async_job_check_time_ms);
                }
            };       
            _checkCallback({finished: 0});
        }, _errorCallback, json_rpc_context);
    };
#else## of if-status-async

    this.status = function (_callback, _errorCallback) {
        if (_callback && typeof _callback !== 'function')
            throw 'Argument _callback must be a function if defined';
        if (_errorCallback && typeof _errorCallback !== 'function')
            throw 'Argument _errorCallback must be a function if defined';
        if (typeof arguments === 'function' && arguments.length > 2)
            throw 'Too many arguments ('+arguments.length+' instead of 2)';
#if( $dynserv_ver )
        var deferred = $.Deferred();
        json_call_ajax(_url, 'ServiceWizard.get_service_status', [{'module_name' : "${module.module_name}", 
                'version' : self.service_version}], 1, function(service_status_ret) {
            srv_url = service_status_ret['url'];
            json_call_ajax(srv_url, "${module.module_name}.status", 
                [], 1, _callback, _errorCallback, null, deferred);
        }, function(err) {
            if (_errorCallback) {
                _errorCallback(err);
            } else {
                deferred.reject({
                    status: 500,
                    error: err
                });
            }
        });
        return deferred;
#else
        return json_call_ajax(_url, "${module.module_name}.status",
            [], 1, _callback, _errorCallback);
#end
    };
#end## of if-status-async
#end## of if-not-status







    function request(url, module, func, params, numRets, options) {
        // Argh -- a poor man's json rpc.
        var rpc = {
            params: params,
            method: module + '.' + func,
            version: '1.1',
            id: String(Math.random()).slice(2)
        },
        header = {};

        if (options.rpcContext) {
            rpc.context = options.rpcContext;
        }

        if (options.authorization !== null) {
            header.Authorization = options.authorization;
        }

        return ajax.post({
            url: url,
            timeout: options.timeout,
            data: JSON.stringify(rpc),
            header: header
        }).then(function (response) {
                var data = JSON.parse(response);
                if (numRets === 1) {
                    return data.result[0];
                }
                return data.result;
        }).catch(function (err) {
                if (err.xhr && err.xhr.responseText) {
                    var data;
                    try {
                        data = JSON.parse(err.xhr.responseText);
                        // follows a weird convention. In any case, let us throw
                        // it as an exception.
                    } catch (ex) {
                        // not json, oh well.                        
                        throw new exceptions.RequestError(err.xhr.status, err.xhr.statusText, url, err.xhr.responseText);
                    }
                    
                    // DANGER: This is highly dependent up on what is returned in
                    // the "error.error" property of ... the error object.
                    // It is assumbed to be a newline separated list of strings
                    // the penultimate one of which is a simple string expressing
                    // the exception.
                    var maybeStackTrace,
                        maybeErrorName;
                        
                    if (data.error && data.error.error && typeof data.error.error === 'string') {                    
                        maybeStackTrace = data.error.error.split('\n');
                    
                        if (maybeStackTrace.length >= 2) {
                            maybeErrorName = maybeStackTrace[maybeStackTrace.length - 2];
                        }
                    }
                        
                    switch (maybeErrorName) {
                        case 'AttributeError': 
                            throw new exceptions.AttributeError(module, func, data);
                            break;
                        default:
                            throw new exceptions.JsonRpcError(module, func, params, url, data.error);
                    }
                    
                }
                throw err;
        });
    }

    return Object.freeze({
        request: request
    });






    /*
     * JSON call using jQuery method.
     */
    function json_call_ajax(srv_url, method, params, numRets, callback, errorCallback, json_rpc_context, deferred) {
        if (!deferred)
            deferred = $.Deferred();

        if (typeof callback === 'function') {
           deferred.done(callback);
        }

        if (typeof errorCallback === 'function') {
           deferred.fail(errorCallback);
        }

        var rpc = {
            params : params,
            method : method,
            version: "1.1",
            id: String(Math.random()).slice(2),
        };
        if (json_rpc_context)
            rpc['context'] = json_rpc_context;

        var beforeSend = null;
        var token = (_auth_cb && typeof _auth_cb === 'function') ? _auth_cb()
            : (_auth.token ? _auth.token : null);
        if (token != null) {
            beforeSend = function (xhr) {
                xhr.setRequestHeader("Authorization", token);
            }
        }

        var xhr = jQuery.ajax({
            url: srv_url,
            dataType: "text",
            type: 'POST',
            processData: false,
            data: JSON.stringify(rpc),
            beforeSend: beforeSend,
            timeout: _timeout,
            success: function (data, status, xhr) {
                var result;
                try {
                    var resp = JSON.parse(data);
                    result = (numRets === 1 ? resp.result[0] : resp.result);
                } catch (err) {
                    deferred.reject({
                        status: 503,
                        error: err,
                        url: srv_url,
                        resp: data
                    });
                    return;
                }
                deferred.resolve(result);
            },
            error: function (xhr, textStatus, errorThrown) {
                var error;
                if (xhr.responseText) {
                    try {
                        var resp = JSON.parse(xhr.responseText);
                        error = resp.error;
                    } catch (err) { // Not JSON
                        error = "Unknown error - " + xhr.responseText;
                    }
                } else {
                    error = "Unknown Error";
                }
                deferred.reject({
                    status: 500,
                    error: error
                });
            }
        });

        var promise = deferred.promise();
        promise.xhr = xhr;
        return promise;
    }
}


#end ## foreach module



























function AsyncMethods(url, auth, auth_cb, timeout, async_job_check_time_ms, service_version) {
    var self = this;

    this.url = url;
    var _url = url;

    this.timeout = timeout;
    var _timeout = timeout;
    
    this.async_job_check_time_ms = async_job_check_time_ms;
    if (!this.async_job_check_time_ms)
        this.async_job_check_time_ms = 100;
    this.async_job_check_time_scale_percent = 150;
    this.async_job_check_max_time_ms = 300000;  // 5 minutes
    this.service_version = service_version;

    var _auth = auth ? auth : { 'token' : '', 'user_id' : ''};
    var _auth_cb = auth_cb;

    this._check_job = function (job_id, _callback, _errorCallback) {
        if (typeof job_id === 'function')
            throw 'Argument job_id can not be a function';
        if (_callback && typeof _callback !== 'function')
            throw 'Argument _callback must be a function if defined';
        if (_errorCallback && typeof _errorCallback !== 'function')
            throw 'Argument _errorCallback must be a function if defined';
        if (typeof arguments === 'function' && arguments.length > 3)
            throw 'Too many arguments ('+arguments.length+' instead of 3)';
        return json_call_ajax(_url, "AsyncMethods._check_job", 
            [job_id], 1, _callback, _errorCallback);
    };

    this.get_no_object = function (_callback, _errorCallback, json_rpc_context) {
        if (self.service_version) {
            if (!json_rpc_context)
                json_rpc_context = {};
            json_rpc_context['service_ver'] = self.service_version;
        }
        var async_job_check_time_ms = self.async_job_check_time_ms;
        self._get_no_object_submit(function(job_id) {
            var _checkCallback = null;
            _checkCallback = function(job_state) {
                if (job_state.finished != 0) {
                    if (!job_state.hasOwnProperty('result'))
                        job_state.result = null;
                    _callback(job_state.result);
                } else {
                    setTimeout(function () {
                        async_job_check_time_ms = async_job_check_time_ms * 
                            self.async_job_check_time_scale_percent / 100;
                        if (async_job_check_time_ms > self.async_job_check_max_time_ms)
                            async_job_check_time_ms = self.async_job_check_max_time_ms;
                        self._check_job(job_id, _checkCallback, _errorCallback);
                    }, async_job_check_time_ms);
                }
            };       
            _checkCallback({finished: 0});
        }, _errorCallback, json_rpc_context);
    };

    this._get_no_object_submit = function (_callback, _errorCallback, json_rpc_context) {
        if (_callback && typeof _callback !== 'function')
            throw 'Argument _callback must be a function if defined';
        if (_errorCallback && typeof _errorCallback !== 'function')
            throw 'Argument _errorCallback must be a function if defined';
        if (typeof arguments === 'function' && arguments.length > 0+2)
            throw 'Too many arguments ('+arguments.length+' instead of '+(0+2)+')';
        return json_call_ajax(_url, "AsyncMethods._get_no_object_submit", 
            [], 1, _callback, _errorCallback, json_rpc_context);
    };
    
 
    this.get_one_object = function (arg_1, _callback, _errorCallback, json_rpc_context) {
        if (self.service_version) {
            if (!json_rpc_context)
                json_rpc_context = {};
            json_rpc_context['service_ver'] = self.service_version;
        }
        var async_job_check_time_ms = self.async_job_check_time_ms;
        self._get_one_object_submit(arg_1, function(job_id) {
            var _checkCallback = null;
            _checkCallback = function(job_state) {
                if (job_state.finished != 0) {
                    if (!job_state.hasOwnProperty('result'))
                        job_state.result = null;
                    _callback(job_state.result[0]);
                } else {
                    setTimeout(function () {
                        async_job_check_time_ms = async_job_check_time_ms * 
                            self.async_job_check_time_scale_percent / 100;
                        if (async_job_check_time_ms > self.async_job_check_max_time_ms)
                            async_job_check_time_ms = self.async_job_check_max_time_ms;
                        self._check_job(job_id, _checkCallback, _errorCallback);
                    }, async_job_check_time_ms);
                }
            };       
            _checkCallback({finished: 0});
        }, _errorCallback, json_rpc_context);
    };

    this._get_one_object_submit = function (arg_1, _callback, _errorCallback, json_rpc_context) {
        if (typeof arg_1 === 'function')
            throw 'Argument arg_1 can not be a function';
        if (_callback && typeof _callback !== 'function')
            throw 'Argument _callback must be a function if defined';
        if (_errorCallback && typeof _errorCallback !== 'function')
            throw 'Argument _errorCallback must be a function if defined';
        if (typeof arguments === 'function' && arguments.length > 1+2)
            throw 'Too many arguments ('+arguments.length+' instead of '+(1+2)+')';
        return json_call_ajax(_url, "AsyncMethods._get_one_object_submit", 
            [arg_1], 1, _callback, _errorCallback, json_rpc_context);
    };
    
 
    this.get_two_objects = function (arg_1, arg_2, _callback, _errorCallback, json_rpc_context) {
        if (self.service_version) {
            if (!json_rpc_context)
                json_rpc_context = {};
            json_rpc_context['service_ver'] = self.service_version;
        }
        var async_job_check_time_ms = self.async_job_check_time_ms;
        self._get_two_objects_submit(arg_1, arg_2, function(job_id) {
            var _checkCallback = null;
            _checkCallback = function(job_state) {
                if (job_state.finished != 0) {
                    if (!job_state.hasOwnProperty('result'))
                        job_state.result = null;
                    _callback(job_state.result);
                } else {
                    setTimeout(function () {
                        async_job_check_time_ms = async_job_check_time_ms * 
                            self.async_job_check_time_scale_percent / 100;
                        if (async_job_check_time_ms > self.async_job_check_max_time_ms)
                            async_job_check_time_ms = self.async_job_check_max_time_ms;
                        self._check_job(job_id, _checkCallback, _errorCallback);
                    }, async_job_check_time_ms);
                }
            };       
            _checkCallback({finished: 0});
        }, _errorCallback, json_rpc_context);
    };

    this._get_two_objects_submit = function (arg_1, arg_2, _callback, _errorCallback, json_rpc_context) {
        if (typeof arg_1 === 'function')
            throw 'Argument arg_1 can not be a function';
        if (typeof arg_2 === 'function')
            throw 'Argument arg_2 can not be a function';
        if (_callback && typeof _callback !== 'function')
            throw 'Argument _callback must be a function if defined';
        if (_errorCallback && typeof _errorCallback !== 'function')
            throw 'Argument _errorCallback must be a function if defined';
        if (typeof arguments === 'function' && arguments.length > 2+2)
            throw 'Too many arguments ('+arguments.length+' instead of '+(2+2)+')';
        return json_call_ajax(_url, "AsyncMethods._get_two_objects_submit", 
            [arg_1, arg_2], 1, _callback, _errorCallback, json_rpc_context);
    };
    
 
    this.throw_error_on_server_side = function (arg_1, _callback, _errorCallback, json_rpc_context) {
        if (self.service_version) {
            if (!json_rpc_context)
                json_rpc_context = {};
            json_rpc_context['service_ver'] = self.service_version;
        }
        var async_job_check_time_ms = self.async_job_check_time_ms;
        self._throw_error_on_server_side_submit(arg_1, function(job_id) {
            var _checkCallback = null;
            _checkCallback = function(job_state) {
                if (job_state.finished != 0) {
                    if (!job_state.hasOwnProperty('result'))
                        job_state.result = null;
                    _callback(job_state.result[0]);
                } else {
                    setTimeout(function () {
                        async_job_check_time_ms = async_job_check_time_ms * 
                            self.async_job_check_time_scale_percent / 100;
                        if (async_job_check_time_ms > self.async_job_check_max_time_ms)
                            async_job_check_time_ms = self.async_job_check_max_time_ms;
                        self._check_job(job_id, _checkCallback, _errorCallback);
                    }, async_job_check_time_ms);
                }
            };       
            _checkCallback({finished: 0});
        }, _errorCallback, json_rpc_context);
    };

    this._throw_error_on_server_side_submit = function (arg_1, _callback, _errorCallback, json_rpc_context) {
        if (typeof arg_1 === 'function')
            throw 'Argument arg_1 can not be a function';
        if (_callback && typeof _callback !== 'function')
            throw 'Argument _callback must be a function if defined';
        if (_errorCallback && typeof _errorCallback !== 'function')
            throw 'Argument _errorCallback must be a function if defined';
        if (typeof arguments === 'function' && arguments.length > 1+2)
            throw 'Too many arguments ('+arguments.length+' instead of '+(1+2)+')';
        return json_call_ajax(_url, "AsyncMethods._throw_error_on_server_side_submit", 
            [arg_1], 1, _callback, _errorCallback, json_rpc_context);
    };
    
  
    this.status = function (_callback, _errorCallback) {
        if (_callback && typeof _callback !== 'function')
            throw 'Argument _callback must be a function if defined';
        if (_errorCallback && typeof _errorCallback !== 'function')
            throw 'Argument _errorCallback must be a function if defined';
        if (typeof arguments === 'function' && arguments.length > 2)
            throw 'Too many arguments ('+arguments.length+' instead of 2)';
        return json_call_ajax(_url, "AsyncMethods.status",
            [], 1, _callback, _errorCallback);
    };


    /*
     * JSON call using jQuery method.
     */
    function json_call_ajax(srv_url, method, params, numRets, callback, errorCallback, json_rpc_context, deferred) {
        if (!deferred)
            deferred = $.Deferred();

        if (typeof callback === 'function') {
           deferred.done(callback);
        }

        if (typeof errorCallback === 'function') {
           deferred.fail(errorCallback);
        }

        var rpc = {
            params : params,
            method : method,
            version: "1.1",
            id: String(Math.random()).slice(2),
        };
        if (json_rpc_context)
            rpc['context'] = json_rpc_context;

        var beforeSend = null;
        var token = (_auth_cb && typeof _auth_cb === 'function') ? _auth_cb()
            : (_auth.token ? _auth.token : null);
        if (token != null) {
            beforeSend = function (xhr) {
                xhr.setRequestHeader("Authorization", token);
            }
        }

        var xhr = jQuery.ajax({
            url: srv_url,
            dataType: "text",
            type: 'POST',
            processData: false,
            data: JSON.stringify(rpc),
            beforeSend: beforeSend,
            timeout: _timeout,
            success: function (data, status, xhr) {
                var result;
                try {
                    var resp = JSON.parse(data);
                    result = (numRets === 1 ? resp.result[0] : resp.result);
                } catch (err) {
                    deferred.reject({
                        status: 503,
                        error: err,
                        url: srv_url,
                        resp: data
                    });
                    return;
                }
                deferred.resolve(result);
            },
            error: function (xhr, textStatus, errorThrown) {
                var error;
                if (xhr.responseText) {
                    try {
                        var resp = JSON.parse(xhr.responseText);
                        error = resp.error;
                    } catch (err) { // Not JSON
                        error = "Unknown error - " + xhr.responseText;
                    }
                } else {
                    error = "Unknown Error";
                }
                deferred.reject({
                    status: 500,
                    error: error
                });
            }
        });

        var promise = deferred.promise();
        promise.xhr = xhr;
        return promise;
    }
}


