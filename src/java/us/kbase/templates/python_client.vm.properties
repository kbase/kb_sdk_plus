# -*- coding: utf-8 -*-
#[[############################################################]]#
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
#[[############################################################]]#

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
#foreach( $module in $modules )


class ${module.module_name}(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'#if($any_async || $async_version || $dynserv_ver),
            service_ver=#if($service_ver)'$service_ver'#{else}None#{end}#if($any_async || $async_version),
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000#{end}#{end}):
        if url is None:
#if( $default_service_url )
            url = '${default_service_url}'
#else
            raise ValueError('A url is required')
#end
#if($any_async || $async_version || $dynserv_ver)
        self._service_ver = service_ver
#else
        self._service_ver = None
#end
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc#if($any_async || $async_version),
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms#{end}#if($dynserv_ver),
            lookup_url=True#{end})
#set( $status_in_kidl = false )
#foreach($method in $module.methods)
#if( ${method.name} == "status" )
#set( $status_in_kidl = true )
#end
#set($comma_args = "#if($method.arg_count>0), ${method.args}#{else}#{end}")

    def ${method.name}(self${comma_args}, context=None):
#if( $method.py_doc_lines.size() > 0 )
        """
#foreach( $docline in $method.py_doc_lines )
        ${docline}
#end
        """
#end
#if($method.async || $async_version)
        return self._client.run_job('${module.module_name}.${method.name}',
                                    [${method.args}], self._service_ver, context)
#else
        return self._client.call_method('${module.module_name}.${method.name}',
                                        [${method.args}], self._service_ver, context)
#end## of if-async
#end## of foreach method
#if( !$status_in_kidl )
#if( $async_version )

    def status(self, context=None):
        return self._client.run_job('${module.module_name}.status',
                                    [], self._service_ver, context)
#else## of if-status-async

    def status(self, context=None):
        return self._client.call_method('${module.module_name}.status',
                                        [], self._service_ver, context)
#end## of if-status-async
#end## of if-not-status
#end## of foreach module