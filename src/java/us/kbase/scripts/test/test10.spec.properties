/*
KBase File Type Manager Service

This service tracks the type of files that KBase software recognizes and
properties of these file types (such as acceptable file extensions).  File types
exist in a hierarchy (e.g. XML is a type of TEXT file) and are uniquely identified
by a short unique string id.  File types are loosely coupled to different types
of data supported by KBase.

In the future, this service may provide some validation capabilities to ensure
that a given file matches some basic properties of  file type, e.g. a valid XML
document.

created 10/18/2012 - msneddon
*/
module CommentsTest {

    /* The unique ID of a file type, which cannot 
    contain any spaces (e.g. file, text, html)*/
    typedef string file_type_id;
    
    /* Reference to file type which is necessary for complicated network of cross-references*/
    typedef file_type_id file_type_id_ref;
    
    /*
    
    An object that encapsulates properties of a file type.  Note that unless otherwise stated, any
    method which returns a file_type also includes all inhereted valid_file_extensions and properties.
    
    file_type_id_ref id
        the unique string based id of this file type
        
    string name
        the human readable long name of the file type
    
    list<string> valid_file_extensions
        a list of extensions that are associated with this file type.  Note that in some cases this will
        include extensions that are inhereted from parent file types (e.g. a valid extension to a tab
        delimited file may be 'tab', but also 'txt' because it is a text file as well)
    
    mapping<string,string> properties
        a simple mapping of key/value pairs used to describe attributes of the file type.  These in general
        can have any string as a key, but note that the following keys have been adopted for most file
        types by convention.  Note that if these properties are not defined, then they are inherited from
        a parent file_type object
            default-extension  -  gives the single default extension
            default-web-renderer  -  the name/id of the widget that should be used by default to view the
                                     contents of this file type
                                     
    */
    typedef structure {
        file_type_id_ref id;
        string name;
        list<string> valid_file_extensions;
        mapping<string,string> properties;
    } file_type;
    
    typedef file_type file_type_ref;

    /*
    This reference certainly should reflect 
    some purpose of developer.
    */
    typedef file_type_ref file_type_ref2;

	/* Testing tuple comment */
	typedef tuple<string,mapping<string,string>> my_tuple;

    /* Returns the specified file_type object with THIS file_type object's extensions and properties ONLY,
    not any of the extensions or properties inhereted by a parent. Therefore be careful since you may not
    have all valid file extensions and properties for this file type!
    */
    funcdef get_this_file_type_only(file_type_id_ref id, file_type_ref2 type, list<file_type_id_ref> val3, string val4, my_tuple val5) returns (file_type_id_ref, file_type_ref2, list<file_type_id_ref>, string, my_tuple);
    
    typedef structure {
    	int val1;
    } struct2;
    
    funcdef second_method(struct2 arg) returns (struct2);

	/* A workspace identifier.

		Select a workspace by one, and only one, of the numerical id or name,
			where the name can also be a KBase ID including the numerical id,
			e.g. kb|ws.35.
		ws_id id - the numerical ID of the workspace.
		ws_name workspace - name of the workspace or the workspace ID in KBase
			format, e.g. kb|ws.78.
		
	*/
	typedef structure {
		string workspace;
		int id;
	} WorkspaceIdentity;

	/* 
		Get a workspace's description.
	*/
	funcdef get_workspace_description(WorkspaceIdentity wsi) returns (string description);

	/* Represents the permissions a user or users have to a workspace:
	
		'a' - administrator. All operations allowed.
		'w' - read/write.
		'r' - read.
		'n' - no permissions.
	*/
	typedef string permission;
	
	/* Login name of a KBase user account. */
	typedef string username;
	
	/* 
		Get permissions for a workspace.
	*/
	funcdef get_permissions(WorkspaceIdentity wsi) returns
		(mapping<username, permission> perms);
	
	/* Input parameters for the "save_objects" function.
	
		One, and only one, of the following is required:
		ws_id id - the numerical ID of the workspace.
		ws_name workspace - name of the workspace or the workspace ID in KBase
			format, e.g. kb|ws.78.
				
	*/
	typedef structure {
		string workspace;
		int id;
	} SaveObjectsParams;
	
	/* Metadata associated with an object.
	
		obj_id objid - the numerical id of the object.
		obj_name name - the name of the object.
		type_string type - the type of the object.
		timestamp create_date - the creation date of the object.
		obj_ver ver - the version of the object.
		username created_by - the user that created the object.
		ws_id wsid - the workspace containing the object.
		string chsum - the md5 checksum of the object.
		int size - the size of the object in bytes.

	*/
	typedef tuple<int objid, string name, string type,
		string create_date, int version, username created_by,
		int wsid, string chsum, int size> object_metadata;
	
	/* 
		Save objects to the workspace. Saving over a deleted object undeletes
		it.
	*/
	funcdef save_objects(SaveObjectsParams params)
		returns (list<object_metadata> meta);
	
	typedef tuple<int objid, string name, string type,
		string create_date, int version, username created_by,
		int wsid, string chsum, int size> object_metadata_full;
	
	/* The data and metadata for an object.
	
		UnspecifiedObject data - the object's data.
		object_metadata_full meta - metadata about the object.
		
	*/
	typedef structure {
		UnspecifiedObject data;
		object_metadata_full meta;
	} ObjectData;
	
	/* 
		Get objects from the workspace.
	*/
	funcdef get_objects(list<ObjectData> object_ids)
		returns (list<ObjectData> data);
};