module AsyncMethods
{
	authentication required;

	/*
	The test function below can never pass because the result returned from the python async
	call (e.g. AsyncMethodsServer.py)  is always null. The Java job server
	(in us.kbase.kbasejobservice) acting like the callback server is an SDK
	compiled server and so ignores null values when serializing json, so `result` is not included
	in the response to `check_job`. However, the `run_job` method of the python baseclient
	requires the `result` field to be present when `finished` is 1, and so will always fail.
	Presumably this test passed at some point, although I don't know why. I assume we
	never saw this problem with the Java version of the callback server because every app method
	returns something...?
	
	If we want to reinstate this test we need to either
	* update the job service (maybe using the python callback server?) to always return the
	  `result` field
	* update the client to allow for a missing `result` field.
	IOW this needs further investigation into how things work now and then updates to match
	that.
	
	The following was deleted from test12.config.properties:
	{
		"method":"get_no_object",
		"auth":true,
		"params":[],
		"outcome":{"status":"pass"}
	},
	async funcdef get_no_object() returns();
	*/

	async funcdef get_one_object(list<string>) returns(list<string>);

	async funcdef get_two_objects(list<string>, mapping<string, string>) returns(list<string>, mapping<string, string>);
	
	async funcdef throw_error_on_server_side(string) returns (string);
};