package us.kbase.test5;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.productivity.java.syslog4j.SyslogIF;

import us.kbase.common.service.JsonServerSyslog;
import us.kbase.common.service.ServerException;
import us.kbase.test5.syslogtest.SyslogTestClient;
import us.kbase.test5.syslogtest.SyslogTestServer;

import junit.framework.Assert;

public class Test5 {
	private static File systemMessagesFile = new File("temp_sys.log");
	private static File fileMessagesFile = new File("temp_file.log");
	private static SyslogTestServer server = null;
	private static File cfgFile = new File("temp_cfg.ini");
	private static Map<String, List<Runnable>> method2impl = new HashMap<String, List<Runnable>>();
	
	static {
		List<Runnable> list = new ArrayList<Runnable>();
		list.add(new Runnable() {
			@Override
			public void run() {
				server.logInfo("msg1");
				server.setLogLevel(SyslogTestServer.LOG_LEVEL_ERR);
				server.logInfo("msg2");
				server.setLogLevel(SyslogTestServer.LOG_LEVEL_DEBUG2);
				server.logDebug("msg3");
				server.logDebug("msg4", 2);
				server.logDebug("msg5", 3);
				server.setLogLevel(SyslogTestServer.LOG_LEVEL_ERR);
			}
		});
		list.add(new Runnable() {
			@Override
			public void run() {
				server.logErr("err1");
				try {
					Integer.parseInt("err2");
				} catch (NumberFormatException ex) {
					server.logErr(ex);
				}
				try {
					Integer.parseInt("err3");
				} catch (Exception ex) {
					throw new IllegalStateException("Strange err4", ex);
				}
			}
		});
		list.add(new Runnable() {
			@Override
			public void run() {
				server.logInfo("msgInvisible");
				for (int i = 0; i < 101; i++)
					server.logErr("msg" + i);
			}
		});
		method2impl.put("nothing", list);
	}
	
	public static void main(String[] args) throws Throwable {
		Server server = new Server(9999);
		ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
        context.setContextPath("/");
        server.setHandler(context);
        context.addServlet(new ServletHolder(SyslogTestServer.class), "/*");
        server.start();
		new Test5(new SyslogTestClient(new URL("http://localhost:9999")));
		server.stop();
	}
	
	public Test5(SyslogTestClient client) throws Throwable {
		try {
			initMessages();
			client.nothing();
			Assert.assertTrue(ifMsg(systemMessagesFile, "[INFO]", "[us.kbase.test5.syslogtest.SyslogTestServer]", "start method"));
			Assert.assertTrue(ifMsg(systemMessagesFile, "[INFO]", "[us.kbase.test5.Test5$1]", "msg1"));
			Assert.assertFalse(ifMsg(systemMessagesFile, "msg2"));
			Assert.assertTrue(ifMsg(systemMessagesFile, "[DEBUG]", "[us.kbase.test5.Test5$1]", "msg3"));
			Assert.assertTrue(ifMsg(systemMessagesFile, "[DEBUG]", "[us.kbase.test5.Test5$1]", "msg4"));
			Assert.assertFalse(ifMsg(systemMessagesFile, "msg5"));
			Assert.assertTrue(ifMsg(systemMessagesFile, "[INFO]", "[us.kbase.test5.syslogtest.SyslogTestServer]", "end method"));
			///////////////////////////////////////////////////////////////////////////
			initMessages();
			try {
				client.nothing();
				Assert.fail("Server exception should occur here");
			} catch (ServerException ex) {
				Assert.assertTrue(ex.getMessage().contains("err4"));
			}
			Assert.assertTrue(ifMsg(systemMessagesFile, "[ERR]", "[us.kbase.test5.Test5$2]", "err1"));
			Assert.assertTrue(ifMsg(systemMessagesFile, "[ERR]", "[us.kbase.test5.Test5$2]", "err2"));
			Assert.assertTrue(ifMsg(systemMessagesFile, "[ERR]", "[us.kbase.test5.syslogtest.SyslogTestServer]", "Illegal", "err4"));
			Assert.assertTrue(ifMsg(systemMessagesFile, "[ERR]", "[us.kbase.test5.syslogtest.SyslogTestServer]", "Cause", "err3"));
			///////////////////////////////////////////////////////////////////////////
			PrintWriter pw = new PrintWriter(cfgFile);
			pw.println("[SyslogTest]\nmlog_log_file=temp.log\nmlog_log_level=3\n");
			pw.close();
			System.setProperty("KB_DEPLOYMENT_CONFIG", cfgFile.getAbsolutePath());
			initMessages();
			client.nothing();
			Assert.assertTrue(ifMsg(systemMessagesFile, "end method"));
			Assert.assertFalse(ifMsg(fileMessagesFile, "msgInvisible"));
			Assert.assertTrue(ifMsg(fileMessagesFile, "[ERR]", "[us.kbase.test5.Test5$3]", "msg100"));
			Assert.assertTrue(ifMsg(fileMessagesFile, "end method"));
		} catch (Throwable ex) {
			printMessages(systemMessagesFile);
			throw ex;
		} finally {
			if (systemMessagesFile.exists())
				systemMessagesFile.delete();
			if (fileMessagesFile.exists())
				fileMessagesFile.delete();
			if (cfgFile.exists())
				cfgFile.delete();
		}
	}
	
	private void printMessages(File f) throws Exception {
		BufferedReader br = new BufferedReader(new FileReader(f));
		while (true) {
			String msg = br.readLine();
			if (msg == null)
				break;
			System.out.println(msg);
		}
		br.close();
	}
	
	public void initMessages() throws Exception {
		new FileWriter(systemMessagesFile).close();
		new FileWriter(fileMessagesFile).close();
	}
	
	public boolean ifMsg(File f, String... msgParts) throws Exception {
		BufferedReader br = new BufferedReader(new FileReader(f));
		boolean ret = false;
		while (true) {
			String msg = br.readLine();
			if (msg == null)
				break;
			boolean all = true;
			for (String msgPart : msgParts)
				if (!msg.contains(msgPart))
					all = false;
			if (all) {
				ret = true;
				break;
			}
		}
		br.close();
		return ret;
	}
	
	public static void serverMethod(SyslogTestServer server) {
		String methodName = getCallingMethod(server.getClass());
		if (methodName.equals("<init>")) {
			server.changeSyslogOutput(new MyOutput());
		} else if (methodName.equals("nothing")) {
			List<Runnable> runList = method2impl.get(methodName);
			if (runList == null || runList.size() < 1)
				throw new IllegalStateException("Server method implementation should be defined");
			Test5.server = server;
			runList.remove(0).run();
		} else {
			Assert.fail("Unknown server method: " + methodName);
		}
	}

	private static String getCallingMethod(Class<?> caller) {
		StackTraceElement[] st = Thread.currentThread().getStackTrace();
		for (int i = 0; i < st.length; i++) {
			if (st[i].getClassName().equals(caller.getName())) {
				return st[i].getMethodName();
			}
		}
		throw new IllegalStateException("Can not find calling method of " + caller.getName());
	}

	private static void writeToFile(File f, String line) {
		try {
			PrintWriter pw = new PrintWriter(new FileWriter(f, true));
			pw.println(line);
			pw.close();
		} catch (Exception ex) {
			throw new IllegalStateException(ex);
		}
	}
	
	public static class MyOutput extends JsonServerSyslog.SyslogOutput {
		@Override
		public void logToSystem(SyslogIF log, int level, String message) {
			writeToFile(systemMessagesFile, message);
		}
		
		@Override
		public PrintWriter logToFile(File f, PrintWriter pw, int level, String message) {
			writeToFile(fileMessagesFile, f.toString() + ": " + message);
			return null;
		}
	}
}