{
  "FileType" : [ [ {
    "!" : "Bio::KBase::KIDL::KBT::DefineModule",
    "annotations" : {
      "unknown_annotations" : { }
    },
    "comment" : "KBase File Type Manager Service\n\nThis service tracks the type of files that KBase software recognizes and\nproperties of these file types (such as acceptable file extensions).  File types\nexist in a hierarchy (e.g. XML is a type of TEXT file) and are uniquely identified\nby a short unique string id.  File types are loosely coupled to different types\nof data supported by KBase.\n\nIn the future, this service may provide some validation capabilities to ensure\nthat a given file matches some basic properties of  file type, e.g. a valid XML\ndocument.\n\ncreated 10/18/2012 - msneddon",
    "module_components" : [ {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
      "module" : "FileType",
      "name" : "file_type_id"
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "The full display name of the file type (e.g. 'Text File', 'HyperText Markup Language File')",
      "module" : "FileType",
      "name" : "file_type_name"
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "A short string indicating a possible file extension",
      "module" : "FileType",
      "name" : "file_extension"
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Struct",
        "annotations" : {
          "metadata" : { },
          "searchable_ws_subset" : { }
        },
        "comment" : "An object that encapsulates properties of a file type.  Note that unless otherwise stated, any\nmethod which returns a file_type also includes all inhereted valid_file_extensions and properties.\n\nfile_type_id id\n    the unique string based id of this file type\n    \nfile_type_name name\n    the human readable long name of the file type\n\nlist<file_extension> valid_file_extensions\n    a list of extensions that are associated with this file type.  Note that in some cases this will\n    include extensions that are inhereted from parent file types (e.g. a valid extension to a tab\n    delimited file may be 'tab', but also 'txt' because it is a text file as well)\n\nmapping<string,string> properties\n    a simple mapping of key/value pairs used to describe attributes of the file type.  These in general\n    can have any string as a key, but note that the following keys have been adopted for most file\n    types by convention.  Note that if these properties are not defined, then they are inherited from\n    a parent file_type object\n        default-extension  -  gives the single default extension\n        default-web-renderer  -  the name/id of the widget that should be used by default to view the\n                                 contents of this file type",
        "items" : [ {
          "!" : "Bio::KBase::KIDL::KBT::StructItem",
          "item_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          },
          "name" : "id",
          "nullable" : "0"
        }, {
          "!" : "Bio::KBase::KIDL::KBT::StructItem",
          "item_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The full display name of the file type (e.g. 'Text File', 'HyperText Markup Language File')",
            "module" : "FileType",
            "name" : "file_type_name"
          },
          "name" : "name",
          "nullable" : "0"
        }, {
          "!" : "Bio::KBase::KIDL::KBT::StructItem",
          "item_type" : {
            "!" : "Bio::KBase::KIDL::KBT::List",
            "annotations" : { },
            "element_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Typedef",
              "alias_type" : {
                "!" : "Bio::KBase::KIDL::KBT::Scalar",
                "annotations" : { },
                "scalar_type" : "string"
              },
              "annotations" : {
                "metadata" : { },
                "searchable_ws_subset" : { },
                "unknown_annotations" : { }
              },
              "comment" : "A short string indicating a possible file extension",
              "module" : "FileType",
              "name" : "file_extension"
            }
          },
          "name" : "valid_file_extensions",
          "nullable" : "0"
        }, {
          "!" : "Bio::KBase::KIDL::KBT::StructItem",
          "item_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Mapping",
            "annotations" : { },
            "key_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "value_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            }
          },
          "name" : "properties",
          "nullable" : "0"
        } ],
        "module" : "FileType",
        "name" : "file_type"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "An object that encapsulates properties of a file type.  Note that unless otherwise stated, any\nmethod which returns a file_type also includes all inhereted valid_file_extensions and properties.\n\nfile_type_id id\n    the unique string based id of this file type\n    \nfile_type_name name\n    the human readable long name of the file type\n\nlist<file_extension> valid_file_extensions\n    a list of extensions that are associated with this file type.  Note that in some cases this will\n    include extensions that are inhereted from parent file types (e.g. a valid extension to a tab\n    delimited file may be 'tab', but also 'txt' because it is a text file as well)\n\nmapping<string,string> properties\n    a simple mapping of key/value pairs used to describe attributes of the file type.  These in general\n    can have any string as a key, but note that the following keys have been adopted for most file\n    types by convention.  Note that if these properties are not defined, then they are inherited from\n    a parent file_type object\n        default-extension  -  gives the single default extension\n        default-web-renderer  -  the name/id of the widget that should be used by default to view the\n                                 contents of this file type",
      "module" : "FileType",
      "name" : "file_type"
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns the specified file_type object including all inherited file extensions and properties, or\nan empty object if the file_type_id is not valid",
      "name" : "get_file_type",
      "parameters" : [ {
        "name" : "id",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
          "module" : "FileType",
          "name" : "file_type_id"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Struct",
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { }
            },
            "comment" : "An object that encapsulates properties of a file type.  Note that unless otherwise stated, any\nmethod which returns a file_type also includes all inhereted valid_file_extensions and properties.\n\nfile_type_id id\n    the unique string based id of this file type\n    \nfile_type_name name\n    the human readable long name of the file type\n\nlist<file_extension> valid_file_extensions\n    a list of extensions that are associated with this file type.  Note that in some cases this will\n    include extensions that are inhereted from parent file types (e.g. a valid extension to a tab\n    delimited file may be 'tab', but also 'txt' because it is a text file as well)\n\nmapping<string,string> properties\n    a simple mapping of key/value pairs used to describe attributes of the file type.  These in general\n    can have any string as a key, but note that the following keys have been adopted for most file\n    types by convention.  Note that if these properties are not defined, then they are inherited from\n    a parent file_type object\n        default-extension  -  gives the single default extension\n        default-web-renderer  -  the name/id of the widget that should be used by default to view the\n                                 contents of this file type",
            "items" : [ {
              "!" : "Bio::KBase::KIDL::KBT::StructItem",
              "item_type" : {
                "!" : "Bio::KBase::KIDL::KBT::Typedef",
                "alias_type" : {
                  "!" : "Bio::KBase::KIDL::KBT::Scalar",
                  "annotations" : { },
                  "scalar_type" : "string"
                },
                "annotations" : {
                  "metadata" : { },
                  "searchable_ws_subset" : { },
                  "unknown_annotations" : { }
                },
                "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
                "module" : "FileType",
                "name" : "file_type_id"
              },
              "name" : "id",
              "nullable" : "0"
            }, {
              "!" : "Bio::KBase::KIDL::KBT::StructItem",
              "item_type" : {
                "!" : "Bio::KBase::KIDL::KBT::Typedef",
                "alias_type" : {
                  "!" : "Bio::KBase::KIDL::KBT::Scalar",
                  "annotations" : { },
                  "scalar_type" : "string"
                },
                "annotations" : {
                  "metadata" : { },
                  "searchable_ws_subset" : { },
                  "unknown_annotations" : { }
                },
                "comment" : "The full display name of the file type (e.g. 'Text File', 'HyperText Markup Language File')",
                "module" : "FileType",
                "name" : "file_type_name"
              },
              "name" : "name",
              "nullable" : "0"
            }, {
              "!" : "Bio::KBase::KIDL::KBT::StructItem",
              "item_type" : {
                "!" : "Bio::KBase::KIDL::KBT::List",
                "annotations" : { },
                "element_type" : {
                  "!" : "Bio::KBase::KIDL::KBT::Typedef",
                  "alias_type" : {
                    "!" : "Bio::KBase::KIDL::KBT::Scalar",
                    "annotations" : { },
                    "scalar_type" : "string"
                  },
                  "annotations" : {
                    "metadata" : { },
                    "searchable_ws_subset" : { },
                    "unknown_annotations" : { }
                  },
                  "comment" : "A short string indicating a possible file extension",
                  "module" : "FileType",
                  "name" : "file_extension"
                }
              },
              "name" : "valid_file_extensions",
              "nullable" : "0"
            }, {
              "!" : "Bio::KBase::KIDL::KBT::StructItem",
              "item_type" : {
                "!" : "Bio::KBase::KIDL::KBT::Mapping",
                "annotations" : { },
                "key_type" : {
                  "!" : "Bio::KBase::KIDL::KBT::Scalar",
                  "annotations" : { },
                  "scalar_type" : "string"
                },
                "value_type" : {
                  "!" : "Bio::KBase::KIDL::KBT::Scalar",
                  "annotations" : { },
                  "scalar_type" : "string"
                }
              },
              "name" : "properties",
              "nullable" : "0"
            } ],
            "module" : "FileType",
            "name" : "file_type"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "An object that encapsulates properties of a file type.  Note that unless otherwise stated, any\nmethod which returns a file_type also includes all inhereted valid_file_extensions and properties.\n\nfile_type_id id\n    the unique string based id of this file type\n    \nfile_type_name name\n    the human readable long name of the file type\n\nlist<file_extension> valid_file_extensions\n    a list of extensions that are associated with this file type.  Note that in some cases this will\n    include extensions that are inhereted from parent file types (e.g. a valid extension to a tab\n    delimited file may be 'tab', but also 'txt' because it is a text file as well)\n\nmapping<string,string> properties\n    a simple mapping of key/value pairs used to describe attributes of the file type.  These in general\n    can have any string as a key, but note that the following keys have been adopted for most file\n    types by convention.  Note that if these properties are not defined, then they are inherited from\n    a parent file_type object\n        default-extension  -  gives the single default extension\n        default-web-renderer  -  the name/id of the widget that should be used by default to view the\n                                 contents of this file type",
          "module" : "FileType",
          "name" : "file_type"
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns the specified file_type object with THIS file_type object's extensions and properties ONLY,\nnot any of the extensions or properties inhereted by a parent. Therefore be careful since you may not\nhave all valid file extensions and properties for this file type!",
      "name" : "get_this_file_type_only",
      "parameters" : [ {
        "name" : "id",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
          "module" : "FileType",
          "name" : "file_type_id"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Struct",
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { }
            },
            "comment" : "An object that encapsulates properties of a file type.  Note that unless otherwise stated, any\nmethod which returns a file_type also includes all inhereted valid_file_extensions and properties.\n\nfile_type_id id\n    the unique string based id of this file type\n    \nfile_type_name name\n    the human readable long name of the file type\n\nlist<file_extension> valid_file_extensions\n    a list of extensions that are associated with this file type.  Note that in some cases this will\n    include extensions that are inhereted from parent file types (e.g. a valid extension to a tab\n    delimited file may be 'tab', but also 'txt' because it is a text file as well)\n\nmapping<string,string> properties\n    a simple mapping of key/value pairs used to describe attributes of the file type.  These in general\n    can have any string as a key, but note that the following keys have been adopted for most file\n    types by convention.  Note that if these properties are not defined, then they are inherited from\n    a parent file_type object\n        default-extension  -  gives the single default extension\n        default-web-renderer  -  the name/id of the widget that should be used by default to view the\n                                 contents of this file type",
            "items" : [ {
              "!" : "Bio::KBase::KIDL::KBT::StructItem",
              "item_type" : {
                "!" : "Bio::KBase::KIDL::KBT::Typedef",
                "alias_type" : {
                  "!" : "Bio::KBase::KIDL::KBT::Scalar",
                  "annotations" : { },
                  "scalar_type" : "string"
                },
                "annotations" : {
                  "metadata" : { },
                  "searchable_ws_subset" : { },
                  "unknown_annotations" : { }
                },
                "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
                "module" : "FileType",
                "name" : "file_type_id"
              },
              "name" : "id",
              "nullable" : "0"
            }, {
              "!" : "Bio::KBase::KIDL::KBT::StructItem",
              "item_type" : {
                "!" : "Bio::KBase::KIDL::KBT::Typedef",
                "alias_type" : {
                  "!" : "Bio::KBase::KIDL::KBT::Scalar",
                  "annotations" : { },
                  "scalar_type" : "string"
                },
                "annotations" : {
                  "metadata" : { },
                  "searchable_ws_subset" : { },
                  "unknown_annotations" : { }
                },
                "comment" : "The full display name of the file type (e.g. 'Text File', 'HyperText Markup Language File')",
                "module" : "FileType",
                "name" : "file_type_name"
              },
              "name" : "name",
              "nullable" : "0"
            }, {
              "!" : "Bio::KBase::KIDL::KBT::StructItem",
              "item_type" : {
                "!" : "Bio::KBase::KIDL::KBT::List",
                "annotations" : { },
                "element_type" : {
                  "!" : "Bio::KBase::KIDL::KBT::Typedef",
                  "alias_type" : {
                    "!" : "Bio::KBase::KIDL::KBT::Scalar",
                    "annotations" : { },
                    "scalar_type" : "string"
                  },
                  "annotations" : {
                    "metadata" : { },
                    "searchable_ws_subset" : { },
                    "unknown_annotations" : { }
                  },
                  "comment" : "A short string indicating a possible file extension",
                  "module" : "FileType",
                  "name" : "file_extension"
                }
              },
              "name" : "valid_file_extensions",
              "nullable" : "0"
            }, {
              "!" : "Bio::KBase::KIDL::KBT::StructItem",
              "item_type" : {
                "!" : "Bio::KBase::KIDL::KBT::Mapping",
                "annotations" : { },
                "key_type" : {
                  "!" : "Bio::KBase::KIDL::KBT::Scalar",
                  "annotations" : { },
                  "scalar_type" : "string"
                },
                "value_type" : {
                  "!" : "Bio::KBase::KIDL::KBT::Scalar",
                  "annotations" : { },
                  "scalar_type" : "string"
                }
              },
              "name" : "properties",
              "nullable" : "0"
            } ],
            "module" : "FileType",
            "name" : "file_type"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "An object that encapsulates properties of a file type.  Note that unless otherwise stated, any\nmethod which returns a file_type also includes all inhereted valid_file_extensions and properties.\n\nfile_type_id id\n    the unique string based id of this file type\n    \nfile_type_name name\n    the human readable long name of the file type\n\nlist<file_extension> valid_file_extensions\n    a list of extensions that are associated with this file type.  Note that in some cases this will\n    include extensions that are inhereted from parent file types (e.g. a valid extension to a tab\n    delimited file may be 'tab', but also 'txt' because it is a text file as well)\n\nmapping<string,string> properties\n    a simple mapping of key/value pairs used to describe attributes of the file type.  These in general\n    can have any string as a key, but note that the following keys have been adopted for most file\n    types by convention.  Note that if these properties are not defined, then they are inherited from\n    a parent file_type object\n        default-extension  -  gives the single default extension\n        default-web-renderer  -  the name/id of the widget that should be used by default to view the\n                                 contents of this file type",
          "module" : "FileType",
          "name" : "file_type"
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns the specified file_type name, or an empty string if file_type_id is not valid.",
      "name" : "get_file_type_name",
      "parameters" : [ {
        "name" : "id",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
          "module" : "FileType",
          "name" : "file_type_id"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The full display name of the file type (e.g. 'Text File', 'HyperText Markup Language File')",
          "module" : "FileType",
          "name" : "file_type_name"
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns the specified file_type names, or an empty string if file_type_id is not valid.",
      "name" : "get_file_type_names",
      "parameters" : [ {
        "name" : "ids",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          }
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Mapping",
          "annotations" : { },
          "key_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          },
          "value_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The full display name of the file type (e.g. 'Text File', 'HyperText Markup Language File')",
            "module" : "FileType",
            "name" : "file_type_name"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns a default extension for the given filetype.",
      "name" : "get_default_extension",
      "parameters" : [ {
        "name" : "id",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
          "module" : "FileType",
          "name" : "file_type_id"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "A short string indicating a possible file extension",
          "module" : "FileType",
          "name" : "file_extension"
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns a default extensions for the given filetypes.",
      "name" : "get_default_extensions",
      "parameters" : [ {
        "name" : "ids",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          }
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Mapping",
          "annotations" : { },
          "key_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          },
          "value_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "A short string indicating a possible file extension",
            "module" : "FileType",
            "name" : "file_extension"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns the specified file_type property, or an empty string if file_type_name is not valid\nor the property is undefined.  This method also searches any inhereted properties.",
      "name" : "get_file_type_property",
      "parameters" : [ {
        "name" : "id",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
          "module" : "FileType",
          "name" : "file_type_id"
        }
      }, {
        "name" : "key",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Scalar",
          "annotations" : { },
          "scalar_type" : "string"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Scalar",
          "annotations" : { },
          "scalar_type" : "string"
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns the file_type ids of any file types with names that are an exact match ignoring\ncase to the input name.  There is no gaurantee that file type names are unique.  Note that this\nmethod is generally slow because it must search over every possible file type.",
      "name" : "get_file_type_id_by_full_name",
      "parameters" : [ {
        "name" : "name",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The full display name of the file type (e.g. 'Text File', 'HyperText Markup Language File')",
          "module" : "FileType",
          "name" : "file_type_name"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Given an extension, get a list of possible file types that could apply, including any file_types\nthat inheret this extension from parent file types.",
      "name" : "get_possible_file_type_by_extension",
      "parameters" : [ {
        "name" : "extension",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "A short string indicating a possible file extension",
          "module" : "FileType",
          "name" : "file_extension"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Given an extension, get a list of file types which use this extension as its DEFAULT file type.",
      "name" : "get_possible_file_type_by_default_extension",
      "parameters" : [ {
        "name" : "extension",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "A short string indicating a possible file extension",
          "module" : "FileType",
          "name" : "file_extension"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns the id of the parent file_type, or-1 if no parent exists or the input file_type_id is not valid.",
      "name" : "get_parent",
      "parameters" : [ {
        "name" : "id",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
          "module" : "FileType",
          "name" : "file_type_id"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
          "module" : "FileType",
          "name" : "file_type_id"
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns a list of all children of this file type",
      "name" : "get_all_children",
      "parameters" : [ {
        "name" : "id",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
          "module" : "FileType",
          "name" : "file_type_id"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns the full lineage of the given file_type in order starting from the root, so that the first element\nof the list is the root of the hierarchy, and the last element is the parent of the given file type. Returns\nan empty list if the id is not valid or the id was already the root.",
      "name" : "get_ancestry",
      "parameters" : [ {
        "name" : "id",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
          "module" : "FileType",
          "name" : "file_type_id"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns a list of all decendents (ordered as a breadth first traversal)",
      "name" : "get_all_descendants",
      "parameters" : [ {
        "name" : "id",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
          "module" : "FileType",
          "name" : "file_type_id"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns the file type hierarchy as a newick string, which can be parsed and manipulated by\nvarious tree libraries, such as the KBase Phylogenetic Tree services.",
      "name" : "dump_file_type_hierarchy_in_newick",
      "parameters" : [ ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Scalar",
          "annotations" : { },
          "scalar_type" : "string"
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns a pretty string representation of the full hierarchy of every supported file listed by file\ntype id.  This should be used for display purposes only!",
      "name" : "dump_file_type_hierarchy_pretty",
      "parameters" : [ ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Scalar",
          "annotations" : { },
          "scalar_type" : "string"
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns a list of every file type id that is currently defined in alphabetical order",
      "name" : "all_file_type_ids",
      "parameters" : [ ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Returns a list of every file type id and the value of the associated property.  Thus you can\nquickly list all filetypes and, say, a default renderer if defined for each file type.",
      "name" : "all_file_type_property",
      "parameters" : [ {
        "name" : "propertyName",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Scalar",
          "annotations" : { },
          "scalar_type" : "string"
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Mapping",
          "annotations" : { },
          "key_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          },
          "value_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          }
        }
      } ]
    } ],
    "module_name" : "FileType",
    "options" : [ ],
    "service_name" : "FileType"
  }, [ ], {
    "UnspecifiedObject" : {
      "!" : "Bio::KBase::KIDL::KBT::UnspecifiedObject",
      "annotations" : { }
    },
    "file_extension" : {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "A short string indicating a possible file extension",
      "module" : "FileType",
      "name" : "file_extension"
    },
    "file_type" : {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Struct",
        "annotations" : {
          "metadata" : { },
          "searchable_ws_subset" : { }
        },
        "comment" : "An object that encapsulates properties of a file type.  Note that unless otherwise stated, any\nmethod which returns a file_type also includes all inhereted valid_file_extensions and properties.\n\nfile_type_id id\n    the unique string based id of this file type\n    \nfile_type_name name\n    the human readable long name of the file type\n\nlist<file_extension> valid_file_extensions\n    a list of extensions that are associated with this file type.  Note that in some cases this will\n    include extensions that are inhereted from parent file types (e.g. a valid extension to a tab\n    delimited file may be 'tab', but also 'txt' because it is a text file as well)\n\nmapping<string,string> properties\n    a simple mapping of key/value pairs used to describe attributes of the file type.  These in general\n    can have any string as a key, but note that the following keys have been adopted for most file\n    types by convention.  Note that if these properties are not defined, then they are inherited from\n    a parent file_type object\n        default-extension  -  gives the single default extension\n        default-web-renderer  -  the name/id of the widget that should be used by default to view the\n                                 contents of this file type",
        "items" : [ {
          "!" : "Bio::KBase::KIDL::KBT::StructItem",
          "item_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
            "module" : "FileType",
            "name" : "file_type_id"
          },
          "name" : "id",
          "nullable" : "0"
        }, {
          "!" : "Bio::KBase::KIDL::KBT::StructItem",
          "item_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "The full display name of the file type (e.g. 'Text File', 'HyperText Markup Language File')",
            "module" : "FileType",
            "name" : "file_type_name"
          },
          "name" : "name",
          "nullable" : "0"
        }, {
          "!" : "Bio::KBase::KIDL::KBT::StructItem",
          "item_type" : {
            "!" : "Bio::KBase::KIDL::KBT::List",
            "annotations" : { },
            "element_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Typedef",
              "alias_type" : {
                "!" : "Bio::KBase::KIDL::KBT::Scalar",
                "annotations" : { },
                "scalar_type" : "string"
              },
              "annotations" : {
                "metadata" : { },
                "searchable_ws_subset" : { },
                "unknown_annotations" : { }
              },
              "comment" : "A short string indicating a possible file extension",
              "module" : "FileType",
              "name" : "file_extension"
            }
          },
          "name" : "valid_file_extensions",
          "nullable" : "0"
        }, {
          "!" : "Bio::KBase::KIDL::KBT::StructItem",
          "item_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Mapping",
            "annotations" : { },
            "key_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "value_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            }
          },
          "name" : "properties",
          "nullable" : "0"
        } ],
        "module" : "FileType",
        "name" : "file_type"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "An object that encapsulates properties of a file type.  Note that unless otherwise stated, any\nmethod which returns a file_type also includes all inhereted valid_file_extensions and properties.\n\nfile_type_id id\n    the unique string based id of this file type\n    \nfile_type_name name\n    the human readable long name of the file type\n\nlist<file_extension> valid_file_extensions\n    a list of extensions that are associated with this file type.  Note that in some cases this will\n    include extensions that are inhereted from parent file types (e.g. a valid extension to a tab\n    delimited file may be 'tab', but also 'txt' because it is a text file as well)\n\nmapping<string,string> properties\n    a simple mapping of key/value pairs used to describe attributes of the file type.  These in general\n    can have any string as a key, but note that the following keys have been adopted for most file\n    types by convention.  Note that if these properties are not defined, then they are inherited from\n    a parent file_type object\n        default-extension  -  gives the single default extension\n        default-web-renderer  -  the name/id of the widget that should be used by default to view the\n                                 contents of this file type",
      "module" : "FileType",
      "name" : "file_type"
    },
    "file_type_id" : {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "The unique ID of a file type, which cannot contain any spaces (e.g. file, text, html)",
      "module" : "FileType",
      "name" : "file_type_id"
    },
    "file_type_name" : {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "The full display name of the file type (e.g. 'Text File', 'HyperText Markup Language File')",
      "module" : "FileType",
      "name" : "file_type_name"
    },
    "float" : {
      "!" : "Bio::KBase::KIDL::KBT::Scalar",
      "annotations" : { },
      "scalar_type" : "float"
    },
    "int" : {
      "!" : "Bio::KBase::KIDL::KBT::Scalar",
      "annotations" : { },
      "scalar_type" : "int"
    },
    "string" : {
      "!" : "Bio::KBase::KIDL::KBT::Scalar",
      "annotations" : { },
      "scalar_type" : "string"
    }
  } ] ]
}