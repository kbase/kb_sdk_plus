{
  "IDServerAPI" : [ [ {
    "!" : "Bio::KBase::KIDL::KBT::DefineModule",
    "annotations" : {
      "unknown_annotations" : { }
    },
    "comment" : "The KBase ID server provides access to the mappings between KBase identifiers and\nexternal identifiers (the original identifiers for data that was migrated from\nother databases into KBase).",
    "module_components" : [ {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "A KBase ID is a string starting with the characters \"kb|\".\n\nKBase IDs are typed. The types are designated using a short string. For instance,\n\"g\" denotes a genome, \"fp\" denotes a feature representing a protein-encoding gene, etc.\n\nKBase IDs may be hierarchical. If a KBase genome identifier is \"kb|g.1234\", a protein\nwithin that genome may be represented as \"kb|g.1234.fp.771\".",
      "module" : "IDServerAPI",
      "name" : "kbase_id"
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "Each external database is represented using a short string. Microbes Online is \"MOL\",\nthe SEED is \"SEED\", etc.",
      "module" : "IDServerAPI",
      "name" : "external_db"
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "External database identifiers are strings. They are the precise identifier used\nby that database. It is important to note that if a database uses the same \nidentifier space for more than one data type (for instance, if integers are used for\nidentifying both genomes and genes, and if the same number is valid for both a\ngenome and a gene) then the distinction must be made by using separate exgternal database\nstrings for the different types; e.g. DBNAME-GENE and DBNAME-GENOME for a \ndatabase DBNAME that has overlapping namespace for genes and genomes).",
      "module" : "IDServerAPI",
      "name" : "external_id"
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "A KBase identifier prefix. This is a string that starts with \"kb|\" and includes either a\nsingle type designator (e.g. \"kb|g\") or is a prefix for a hierarchical identifier (e.g.\n\"kb|g.1234.fp\").",
      "module" : "IDServerAPI",
      "name" : "kbase_id_prefix"
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Given a set of KBase identifiers, look up the associated external identifiers.\nIf no external ID is associated with the KBase id, no entry will be present in the return.",
      "name" : "kbase_ids_to_external_ids",
      "parameters" : [ {
        "name" : "ids",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "A KBase ID is a string starting with the characters \"kb|\".\n\nKBase IDs are typed. The types are designated using a short string. For instance,\n\"g\" denotes a genome, \"fp\" denotes a feature representing a protein-encoding gene, etc.\n\nKBase IDs may be hierarchical. If a KBase genome identifier is \"kb|g.1234\", a protein\nwithin that genome may be represented as \"kb|g.1234.fp.771\".",
            "module" : "IDServerAPI",
            "name" : "kbase_id"
          }
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Mapping",
          "annotations" : { },
          "key_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "A KBase ID is a string starting with the characters \"kb|\".\n\nKBase IDs are typed. The types are designated using a short string. For instance,\n\"g\" denotes a genome, \"fp\" denotes a feature representing a protein-encoding gene, etc.\n\nKBase IDs may be hierarchical. If a KBase genome identifier is \"kb|g.1234\", a protein\nwithin that genome may be represented as \"kb|g.1234.fp.771\".",
            "module" : "IDServerAPI",
            "name" : "kbase_id"
          },
          "value_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Tuple",
            "annotations" : { },
            "element_names" : [ "e_1", "e_2" ],
            "element_types" : [ {
              "!" : "Bio::KBase::KIDL::KBT::Typedef",
              "alias_type" : {
                "!" : "Bio::KBase::KIDL::KBT::Scalar",
                "annotations" : { },
                "scalar_type" : "string"
              },
              "annotations" : {
                "metadata" : { },
                "searchable_ws_subset" : { },
                "unknown_annotations" : { }
              },
              "comment" : "Each external database is represented using a short string. Microbes Online is \"MOL\",\nthe SEED is \"SEED\", etc.",
              "module" : "IDServerAPI",
              "name" : "external_db"
            }, {
              "!" : "Bio::KBase::KIDL::KBT::Typedef",
              "alias_type" : {
                "!" : "Bio::KBase::KIDL::KBT::Scalar",
                "annotations" : { },
                "scalar_type" : "string"
              },
              "annotations" : {
                "metadata" : { },
                "searchable_ws_subset" : { },
                "unknown_annotations" : { }
              },
              "comment" : "External database identifiers are strings. They are the precise identifier used\nby that database. It is important to note that if a database uses the same \nidentifier space for more than one data type (for instance, if integers are used for\nidentifying both genomes and genes, and if the same number is valid for both a\ngenome and a gene) then the distinction must be made by using separate exgternal database\nstrings for the different types; e.g. DBNAME-GENE and DBNAME-GENOME for a \ndatabase DBNAME that has overlapping namespace for genes and genomes).",
              "module" : "IDServerAPI",
              "name" : "external_id"
            } ]
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Given a set of external identifiers, look up the associated KBase identifiers.\nIf no KBase ID is associated with the external id, no entry will be present in the return.",
      "name" : "external_ids_to_kbase_ids",
      "parameters" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "Each external database is represented using a short string. Microbes Online is \"MOL\",\nthe SEED is \"SEED\", etc.",
          "module" : "IDServerAPI",
          "name" : "external_db"
        }
      }, {
        "name" : "ext_ids",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "External database identifiers are strings. They are the precise identifier used\nby that database. It is important to note that if a database uses the same \nidentifier space for more than one data type (for instance, if integers are used for\nidentifying both genomes and genes, and if the same number is valid for both a\ngenome and a gene) then the distinction must be made by using separate exgternal database\nstrings for the different types; e.g. DBNAME-GENE and DBNAME-GENOME for a \ndatabase DBNAME that has overlapping namespace for genes and genomes).",
            "module" : "IDServerAPI",
            "name" : "external_id"
          }
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Mapping",
          "annotations" : { },
          "key_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "External database identifiers are strings. They are the precise identifier used\nby that database. It is important to note that if a database uses the same \nidentifier space for more than one data type (for instance, if integers are used for\nidentifying both genomes and genes, and if the same number is valid for both a\ngenome and a gene) then the distinction must be made by using separate exgternal database\nstrings for the different types; e.g. DBNAME-GENE and DBNAME-GENOME for a \ndatabase DBNAME that has overlapping namespace for genes and genomes).",
            "module" : "IDServerAPI",
            "name" : "external_id"
          },
          "value_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "A KBase ID is a string starting with the characters \"kb|\".\n\nKBase IDs are typed. The types are designated using a short string. For instance,\n\"g\" denotes a genome, \"fp\" denotes a feature representing a protein-encoding gene, etc.\n\nKBase IDs may be hierarchical. If a KBase genome identifier is \"kb|g.1234\", a protein\nwithin that genome may be represented as \"kb|g.1234.fp.771\".",
            "module" : "IDServerAPI",
            "name" : "kbase_id"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Register a set of identifiers. All will be assigned identifiers with the given\nprefix.\n\nIf an external ID has already been registered, the existing registration will be returned instead \nof a new ID being allocated.",
      "name" : "register_ids",
      "parameters" : [ {
        "name" : "prefix",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "A KBase identifier prefix. This is a string that starts with \"kb|\" and includes either a\nsingle type designator (e.g. \"kb|g\") or is a prefix for a hierarchical identifier (e.g.\n\"kb|g.1234.fp\").",
          "module" : "IDServerAPI",
          "name" : "kbase_id_prefix"
        }
      }, {
        "name" : "db_name",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "Each external database is represented using a short string. Microbes Online is \"MOL\",\nthe SEED is \"SEED\", etc.",
          "module" : "IDServerAPI",
          "name" : "external_db"
        }
      }, {
        "name" : "ids",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::List",
          "annotations" : { },
          "element_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "External database identifiers are strings. They are the precise identifier used\nby that database. It is important to note that if a database uses the same \nidentifier space for more than one data type (for instance, if integers are used for\nidentifying both genomes and genes, and if the same number is valid for both a\ngenome and a gene) then the distinction must be made by using separate exgternal database\nstrings for the different types; e.g. DBNAME-GENE and DBNAME-GENOME for a \ndatabase DBNAME that has overlapping namespace for genes and genomes).",
            "module" : "IDServerAPI",
            "name" : "external_id"
          }
        }
      } ],
      "return_type" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Mapping",
          "annotations" : { },
          "key_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "External database identifiers are strings. They are the precise identifier used\nby that database. It is important to note that if a database uses the same \nidentifier space for more than one data type (for instance, if integers are used for\nidentifying both genomes and genes, and if the same number is valid for both a\ngenome and a gene) then the distinction must be made by using separate exgternal database\nstrings for the different types; e.g. DBNAME-GENE and DBNAME-GENOME for a \ndatabase DBNAME that has overlapping namespace for genes and genomes).",
            "module" : "IDServerAPI",
            "name" : "external_id"
          },
          "value_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "A KBase ID is a string starting with the characters \"kb|\".\n\nKBase IDs are typed. The types are designated using a short string. For instance,\n\"g\" denotes a genome, \"fp\" denotes a feature representing a protein-encoding gene, etc.\n\nKBase IDs may be hierarchical. If a KBase genome identifier is \"kb|g.1234\", a protein\nwithin that genome may be represented as \"kb|g.1234.fp.771\".",
            "module" : "IDServerAPI",
            "name" : "kbase_id"
          }
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Allocate a set of identifiers. This allows efficient registration of a large\nnumber of identifiers (e.g. several thousand features in a genome).\n\nThe return is the first identifier allocated.",
      "name" : "allocate_id_range",
      "parameters" : [ {
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "A KBase identifier prefix. This is a string that starts with \"kb|\" and includes either a\nsingle type designator (e.g. \"kb|g\") or is a prefix for a hierarchical identifier (e.g.\n\"kb|g.1234.fp\").",
          "module" : "IDServerAPI",
          "name" : "kbase_id_prefix"
        }
      }, {
        "name" : "count",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Scalar",
          "annotations" : { },
          "scalar_type" : "int"
        }
      } ],
      "return_type" : [ {
        "name" : "starting_value",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Scalar",
          "annotations" : { },
          "scalar_type" : "int"
        }
      } ]
    }, {
      "!" : "Bio::KBase::KIDL::KBT::Funcdef",
      "annotations" : {
        "unknown_annotations" : { }
      },
      "async" : "0",
      "authentication" : "none",
      "comment" : "Register the mappings for a set of external identifiers. The\nKBase identifiers used here were previously allocated using allocate_id_range.\n\nDoes not return a value.",
      "name" : "register_allocated_ids",
      "parameters" : [ {
        "name" : "prefix",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "A KBase identifier prefix. This is a string that starts with \"kb|\" and includes either a\nsingle type designator (e.g. \"kb|g\") or is a prefix for a hierarchical identifier (e.g.\n\"kb|g.1234.fp\").",
          "module" : "IDServerAPI",
          "name" : "kbase_id_prefix"
        }
      }, {
        "name" : "db_name",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Typedef",
          "alias_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "string"
          },
          "annotations" : {
            "metadata" : { },
            "searchable_ws_subset" : { },
            "unknown_annotations" : { }
          },
          "comment" : "Each external database is represented using a short string. Microbes Online is \"MOL\",\nthe SEED is \"SEED\", etc.",
          "module" : "IDServerAPI",
          "name" : "external_db"
        }
      }, {
        "name" : "assignments",
        "type" : {
          "!" : "Bio::KBase::KIDL::KBT::Mapping",
          "annotations" : { },
          "key_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Typedef",
            "alias_type" : {
              "!" : "Bio::KBase::KIDL::KBT::Scalar",
              "annotations" : { },
              "scalar_type" : "string"
            },
            "annotations" : {
              "metadata" : { },
              "searchable_ws_subset" : { },
              "unknown_annotations" : { }
            },
            "comment" : "External database identifiers are strings. They are the precise identifier used\nby that database. It is important to note that if a database uses the same \nidentifier space for more than one data type (for instance, if integers are used for\nidentifying both genomes and genes, and if the same number is valid for both a\ngenome and a gene) then the distinction must be made by using separate exgternal database\nstrings for the different types; e.g. DBNAME-GENE and DBNAME-GENOME for a \ndatabase DBNAME that has overlapping namespace for genes and genomes).",
            "module" : "IDServerAPI",
            "name" : "external_id"
          },
          "value_type" : {
            "!" : "Bio::KBase::KIDL::KBT::Scalar",
            "annotations" : { },
            "scalar_type" : "int"
          }
        }
      } ],
      "return_type" : [ ]
    } ],
    "module_name" : "IDServerAPI",
    "options" : [ ],
    "service_name" : "IDServerAPI"
  }, [ ], {
    "UnspecifiedObject" : {
      "!" : "Bio::KBase::KIDL::KBT::UnspecifiedObject",
      "annotations" : { }
    },
    "external_db" : {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "Each external database is represented using a short string. Microbes Online is \"MOL\",\nthe SEED is \"SEED\", etc.",
      "module" : "IDServerAPI",
      "name" : "external_db"
    },
    "external_id" : {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "External database identifiers are strings. They are the precise identifier used\nby that database. It is important to note that if a database uses the same \nidentifier space for more than one data type (for instance, if integers are used for\nidentifying both genomes and genes, and if the same number is valid for both a\ngenome and a gene) then the distinction must be made by using separate exgternal database\nstrings for the different types; e.g. DBNAME-GENE and DBNAME-GENOME for a \ndatabase DBNAME that has overlapping namespace for genes and genomes).",
      "module" : "IDServerAPI",
      "name" : "external_id"
    },
    "float" : {
      "!" : "Bio::KBase::KIDL::KBT::Scalar",
      "annotations" : { },
      "scalar_type" : "float"
    },
    "int" : {
      "!" : "Bio::KBase::KIDL::KBT::Scalar",
      "annotations" : { },
      "scalar_type" : "int"
    },
    "kbase_id" : {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "A KBase ID is a string starting with the characters \"kb|\".\n\nKBase IDs are typed. The types are designated using a short string. For instance,\n\"g\" denotes a genome, \"fp\" denotes a feature representing a protein-encoding gene, etc.\n\nKBase IDs may be hierarchical. If a KBase genome identifier is \"kb|g.1234\", a protein\nwithin that genome may be represented as \"kb|g.1234.fp.771\".",
      "module" : "IDServerAPI",
      "name" : "kbase_id"
    },
    "kbase_id_prefix" : {
      "!" : "Bio::KBase::KIDL::KBT::Typedef",
      "alias_type" : {
        "!" : "Bio::KBase::KIDL::KBT::Scalar",
        "annotations" : { },
        "scalar_type" : "string"
      },
      "annotations" : {
        "metadata" : { },
        "searchable_ws_subset" : { },
        "unknown_annotations" : { }
      },
      "comment" : "A KBase identifier prefix. This is a string that starts with \"kb|\" and includes either a\nsingle type designator (e.g. \"kb|g\") or is a prefix for a hierarchical identifier (e.g.\n\"kb|g.1234.fp\").",
      "module" : "IDServerAPI",
      "name" : "kbase_id_prefix"
    },
    "string" : {
      "!" : "Bio::KBase::KIDL::KBT::Scalar",
      "annotations" : { },
      "scalar_type" : "string"
    }
  } ] ]
}